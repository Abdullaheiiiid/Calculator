
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ac2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  00002ac2  00002b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800084  00800084  00002b7a  2**0
                  ALLOC
  3 .stab         00001f08  00000000  00000000  00002b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000efb  00000000  00000000  00004a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000597f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005abf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007878  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008763  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009510  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009670  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000098fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a0cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 38       	cpi	r26, 0x86	; 134
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <main>
      8a:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 54 12 	jmp	0x24a8	; 0x24a8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 58 12 	jmp	0x24b0	; 0x24b0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_VidSetPinDirection>:
#define GET_BIT(reg, bit)    (((reg) >> (bit)) & 1)
#define TOGGLE_BIT(reg, bit) ((reg) ^= (1 << (bit)))
#define CLEAR_BIT(reg, bit)  ((reg) &= ~(1 << (bit)))

void DIO_VidSetPinDirection(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8b 83       	std	Y+3, r24	; 0x03
     b5c:	6c 83       	std	Y+4, r22	; 0x04
     b5e:	4d 83       	std	Y+5, r20	; 0x05
    volatile u8 *ddr_reg;

    switch (Copy_u8Port) {
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	28 2f       	mov	r18, r24
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	3f 83       	std	Y+7, r19	; 0x07
     b68:	2e 83       	std	Y+6, r18	; 0x06
     b6a:	8e 81       	ldd	r24, Y+6	; 0x06
     b6c:	9f 81       	ldd	r25, Y+7	; 0x07
     b6e:	81 30       	cpi	r24, 0x01	; 1
     b70:	91 05       	cpc	r25, r1
     b72:	d1 f0       	breq	.+52     	; 0xba8 <DIO_VidSetPinDirection+0x62>
     b74:	2e 81       	ldd	r18, Y+6	; 0x06
     b76:	3f 81       	ldd	r19, Y+7	; 0x07
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	31 05       	cpc	r19, r1
     b7c:	2c f4       	brge	.+10     	; 0xb88 <DIO_VidSetPinDirection+0x42>
     b7e:	8e 81       	ldd	r24, Y+6	; 0x06
     b80:	9f 81       	ldd	r25, Y+7	; 0x07
     b82:	00 97       	sbiw	r24, 0x00	; 0
     b84:	61 f0       	breq	.+24     	; 0xb9e <DIO_VidSetPinDirection+0x58>
     b86:	49 c0       	rjmp	.+146    	; 0xc1a <DIO_VidSetPinDirection+0xd4>
     b88:	2e 81       	ldd	r18, Y+6	; 0x06
     b8a:	3f 81       	ldd	r19, Y+7	; 0x07
     b8c:	22 30       	cpi	r18, 0x02	; 2
     b8e:	31 05       	cpc	r19, r1
     b90:	81 f0       	breq	.+32     	; 0xbb2 <DIO_VidSetPinDirection+0x6c>
     b92:	8e 81       	ldd	r24, Y+6	; 0x06
     b94:	9f 81       	ldd	r25, Y+7	; 0x07
     b96:	83 30       	cpi	r24, 0x03	; 3
     b98:	91 05       	cpc	r25, r1
     b9a:	81 f0       	breq	.+32     	; 0xbbc <DIO_VidSetPinDirection+0x76>
     b9c:	3e c0       	rjmp	.+124    	; 0xc1a <DIO_VidSetPinDirection+0xd4>
        case Port_A:
            ddr_reg = &DDRA;
     b9e:	8a e3       	ldi	r24, 0x3A	; 58
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	9a 83       	std	Y+2, r25	; 0x02
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	0e c0       	rjmp	.+28     	; 0xbc4 <DIO_VidSetPinDirection+0x7e>
            break;
        case Port_B:
            ddr_reg = &DDRB;
     ba8:	87 e3       	ldi	r24, 0x37	; 55
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	9a 83       	std	Y+2, r25	; 0x02
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	09 c0       	rjmp	.+18     	; 0xbc4 <DIO_VidSetPinDirection+0x7e>
            break;
        case Port_C:
            ddr_reg = &DDRC;
     bb2:	84 e3       	ldi	r24, 0x34	; 52
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	9a 83       	std	Y+2, r25	; 0x02
     bb8:	89 83       	std	Y+1, r24	; 0x01
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <DIO_VidSetPinDirection+0x7e>
            break;
        case Port_D:
            ddr_reg = &DDRD;
     bbc:	81 e3       	ldi	r24, 0x31	; 49
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    if (Copy_u8Direction == Input) {
     bc4:	8d 81       	ldd	r24, Y+5	; 0x05
     bc6:	88 23       	and	r24, r24
     bc8:	a9 f4       	brne	.+42     	; 0xbf4 <DIO_VidSetPinDirection+0xae>
    	CLEARBIT(*ddr_reg, Copy_u8Pin);
     bca:	e9 81       	ldd	r30, Y+1	; 0x01
     bcc:	fa 81       	ldd	r31, Y+2	; 0x02
     bce:	80 81       	ld	r24, Z
     bd0:	48 2f       	mov	r20, r24
     bd2:	8c 81       	ldd	r24, Y+4	; 0x04
     bd4:	28 2f       	mov	r18, r24
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	02 2e       	mov	r0, r18
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <DIO_VidSetPinDirection+0x9e>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	0a 94       	dec	r0
     be6:	e2 f7       	brpl	.-8      	; 0xbe0 <DIO_VidSetPinDirection+0x9a>
     be8:	80 95       	com	r24
     bea:	84 23       	and	r24, r20
     bec:	e9 81       	ldd	r30, Y+1	; 0x01
     bee:	fa 81       	ldd	r31, Y+2	; 0x02
     bf0:	80 83       	st	Z, r24
     bf2:	13 c0       	rjmp	.+38     	; 0xc1a <DIO_VidSetPinDirection+0xd4>
    } else {
    	SETBIT(*ddr_reg, Copy_u8Pin);
     bf4:	e9 81       	ldd	r30, Y+1	; 0x01
     bf6:	fa 81       	ldd	r31, Y+2	; 0x02
     bf8:	80 81       	ld	r24, Z
     bfa:	48 2f       	mov	r20, r24
     bfc:	8c 81       	ldd	r24, Y+4	; 0x04
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 2e       	mov	r0, r18
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_VidSetPinDirection+0xc8>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	0a 94       	dec	r0
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <DIO_VidSetPinDirection+0xc4>
     c12:	84 2b       	or	r24, r20
     c14:	e9 81       	ldd	r30, Y+1	; 0x01
     c16:	fa 81       	ldd	r31, Y+2	; 0x02
     c18:	80 83       	st	Z, r24
    }
}
     c1a:	27 96       	adiw	r28, 0x07	; 7
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	cf 91       	pop	r28
     c28:	df 91       	pop	r29
     c2a:	08 95       	ret

00000c2c <DIO_VidSetPinValue>:


void DIO_VidSetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 Copy_u8Value)
{
     c2c:	df 93       	push	r29
     c2e:	cf 93       	push	r28
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	27 97       	sbiw	r28, 0x07	; 7
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	f8 94       	cli
     c3a:	de bf       	out	0x3e, r29	; 62
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	cd bf       	out	0x3d, r28	; 61
     c40:	8b 83       	std	Y+3, r24	; 0x03
     c42:	6c 83       	std	Y+4, r22	; 0x04
     c44:	4d 83       	std	Y+5, r20	; 0x05
    volatile u8 *port_reg;

    switch (Copy_u8Port) {
     c46:	8b 81       	ldd	r24, Y+3	; 0x03
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	3f 83       	std	Y+7, r19	; 0x07
     c4e:	2e 83       	std	Y+6, r18	; 0x06
     c50:	8e 81       	ldd	r24, Y+6	; 0x06
     c52:	9f 81       	ldd	r25, Y+7	; 0x07
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	91 05       	cpc	r25, r1
     c58:	d1 f0       	breq	.+52     	; 0xc8e <DIO_VidSetPinValue+0x62>
     c5a:	2e 81       	ldd	r18, Y+6	; 0x06
     c5c:	3f 81       	ldd	r19, Y+7	; 0x07
     c5e:	22 30       	cpi	r18, 0x02	; 2
     c60:	31 05       	cpc	r19, r1
     c62:	2c f4       	brge	.+10     	; 0xc6e <DIO_VidSetPinValue+0x42>
     c64:	8e 81       	ldd	r24, Y+6	; 0x06
     c66:	9f 81       	ldd	r25, Y+7	; 0x07
     c68:	00 97       	sbiw	r24, 0x00	; 0
     c6a:	61 f0       	breq	.+24     	; 0xc84 <DIO_VidSetPinValue+0x58>
     c6c:	49 c0       	rjmp	.+146    	; 0xd00 <DIO_VidSetPinValue+0xd4>
     c6e:	2e 81       	ldd	r18, Y+6	; 0x06
     c70:	3f 81       	ldd	r19, Y+7	; 0x07
     c72:	22 30       	cpi	r18, 0x02	; 2
     c74:	31 05       	cpc	r19, r1
     c76:	81 f0       	breq	.+32     	; 0xc98 <DIO_VidSetPinValue+0x6c>
     c78:	8e 81       	ldd	r24, Y+6	; 0x06
     c7a:	9f 81       	ldd	r25, Y+7	; 0x07
     c7c:	83 30       	cpi	r24, 0x03	; 3
     c7e:	91 05       	cpc	r25, r1
     c80:	81 f0       	breq	.+32     	; 0xca2 <DIO_VidSetPinValue+0x76>
     c82:	3e c0       	rjmp	.+124    	; 0xd00 <DIO_VidSetPinValue+0xd4>
        case Port_A:
            port_reg = &PORTA;
     c84:	8b e3       	ldi	r24, 0x3B	; 59
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9a 83       	std	Y+2, r25	; 0x02
     c8a:	89 83       	std	Y+1, r24	; 0x01
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <DIO_VidSetPinValue+0x7e>
            break;
        case Port_B:
            port_reg = &PORTB;
     c8e:	88 e3       	ldi	r24, 0x38	; 56
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	9a 83       	std	Y+2, r25	; 0x02
     c94:	89 83       	std	Y+1, r24	; 0x01
     c96:	09 c0       	rjmp	.+18     	; 0xcaa <DIO_VidSetPinValue+0x7e>
            break;
        case Port_C:
            port_reg = &PORTC;
     c98:	85 e3       	ldi	r24, 0x35	; 53
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	9a 83       	std	Y+2, r25	; 0x02
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	04 c0       	rjmp	.+8      	; 0xcaa <DIO_VidSetPinValue+0x7e>
            break;
        case Port_D:
            port_reg = &PORTD;
     ca2:	82 e3       	ldi	r24, 0x32	; 50
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	9a 83       	std	Y+2, r25	; 0x02
     ca8:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    if (Copy_u8Value == Pin_High) {
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	a1 f4       	brne	.+40     	; 0xcd8 <DIO_VidSetPinValue+0xac>
        SETBIT(*port_reg, Copy_u8Pin);
     cb0:	e9 81       	ldd	r30, Y+1	; 0x01
     cb2:	fa 81       	ldd	r31, Y+2	; 0x02
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8c 81       	ldd	r24, Y+4	; 0x04
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <DIO_VidSetPinValue+0x9e>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <DIO_VidSetPinValue+0x9a>
     cce:	84 2b       	or	r24, r20
     cd0:	e9 81       	ldd	r30, Y+1	; 0x01
     cd2:	fa 81       	ldd	r31, Y+2	; 0x02
     cd4:	80 83       	st	Z, r24
     cd6:	14 c0       	rjmp	.+40     	; 0xd00 <DIO_VidSetPinValue+0xd4>
    } else {
        CLEARBIT(*port_reg, Copy_u8Pin);
     cd8:	e9 81       	ldd	r30, Y+1	; 0x01
     cda:	fa 81       	ldd	r31, Y+2	; 0x02
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8c 81       	ldd	r24, Y+4	; 0x04
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <DIO_VidSetPinValue+0xc6>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <DIO_VidSetPinValue+0xc2>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	e9 81       	ldd	r30, Y+1	; 0x01
     cfc:	fa 81       	ldd	r31, Y+2	; 0x02
     cfe:	80 83       	st	Z, r24
    }
}
     d00:	27 96       	adiw	r28, 0x07	; 7
     d02:	0f b6       	in	r0, 0x3f	; 63
     d04:	f8 94       	cli
     d06:	de bf       	out	0x3e, r29	; 62
     d08:	0f be       	out	0x3f, r0	; 63
     d0a:	cd bf       	out	0x3d, r28	; 61
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <DIO_VidGetPinValue>:

void DIO_VidGetPinValue(u8 Copy_u8Port , u8 Copy_u8Pin , u8 * pu8Data)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	28 97       	sbiw	r28, 0x08	; 8
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	6c 83       	std	Y+4, r22	; 0x04
     d2a:	5e 83       	std	Y+6, r21	; 0x06
     d2c:	4d 83       	std	Y+5, r20	; 0x05
    volatile u8 *pin_reg;

    switch (Copy_u8Port) {
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	38 87       	std	Y+8, r19	; 0x08
     d36:	2f 83       	std	Y+7, r18	; 0x07
     d38:	4f 81       	ldd	r20, Y+7	; 0x07
     d3a:	58 85       	ldd	r21, Y+8	; 0x08
     d3c:	41 30       	cpi	r20, 0x01	; 1
     d3e:	51 05       	cpc	r21, r1
     d40:	d9 f0       	breq	.+54     	; 0xd78 <DIO_VidGetPinValue+0x66>
     d42:	8f 81       	ldd	r24, Y+7	; 0x07
     d44:	98 85       	ldd	r25, Y+8	; 0x08
     d46:	82 30       	cpi	r24, 0x02	; 2
     d48:	91 05       	cpc	r25, r1
     d4a:	34 f4       	brge	.+12     	; 0xd58 <DIO_VidGetPinValue+0x46>
     d4c:	2f 81       	ldd	r18, Y+7	; 0x07
     d4e:	38 85       	ldd	r19, Y+8	; 0x08
     d50:	21 15       	cp	r18, r1
     d52:	31 05       	cpc	r19, r1
     d54:	61 f0       	breq	.+24     	; 0xd6e <DIO_VidGetPinValue+0x5c>
     d56:	31 c0       	rjmp	.+98     	; 0xdba <DIO_VidGetPinValue+0xa8>
     d58:	4f 81       	ldd	r20, Y+7	; 0x07
     d5a:	58 85       	ldd	r21, Y+8	; 0x08
     d5c:	42 30       	cpi	r20, 0x02	; 2
     d5e:	51 05       	cpc	r21, r1
     d60:	81 f0       	breq	.+32     	; 0xd82 <DIO_VidGetPinValue+0x70>
     d62:	8f 81       	ldd	r24, Y+7	; 0x07
     d64:	98 85       	ldd	r25, Y+8	; 0x08
     d66:	83 30       	cpi	r24, 0x03	; 3
     d68:	91 05       	cpc	r25, r1
     d6a:	81 f0       	breq	.+32     	; 0xd8c <DIO_VidGetPinValue+0x7a>
     d6c:	26 c0       	rjmp	.+76     	; 0xdba <DIO_VidGetPinValue+0xa8>
        case Port_A:
            pin_reg = &PINA;
     d6e:	89 e3       	ldi	r24, 0x39	; 57
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
     d76:	0e c0       	rjmp	.+28     	; 0xd94 <DIO_VidGetPinValue+0x82>
            break;
        case Port_B:
            pin_reg = &PINB;
     d78:	86 e3       	ldi	r24, 0x36	; 54
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	9a 83       	std	Y+2, r25	; 0x02
     d7e:	89 83       	std	Y+1, r24	; 0x01
     d80:	09 c0       	rjmp	.+18     	; 0xd94 <DIO_VidGetPinValue+0x82>
            break;
        case Port_C:
            pin_reg = &PINC;
     d82:	83 e3       	ldi	r24, 0x33	; 51
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9a 83       	std	Y+2, r25	; 0x02
     d88:	89 83       	std	Y+1, r24	; 0x01
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <DIO_VidGetPinValue+0x82>
            break;
        case Port_D:
            pin_reg = &PIND;
     d8c:	80 e3       	ldi	r24, 0x30	; 48
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
            break;
        default:
            return;
    }

    *pu8Data = GET_BIT(*pin_reg, Copy_u8Pin);
     d94:	e9 81       	ldd	r30, Y+1	; 0x01
     d96:	fa 81       	ldd	r31, Y+2	; 0x02
     d98:	80 81       	ld	r24, Z
     d9a:	28 2f       	mov	r18, r24
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	88 2f       	mov	r24, r24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	a9 01       	movw	r20, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_VidGetPinValue+0x9a>
     da8:	55 95       	asr	r21
     daa:	47 95       	ror	r20
     dac:	8a 95       	dec	r24
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_VidGetPinValue+0x96>
     db0:	ca 01       	movw	r24, r20
     db2:	81 70       	andi	r24, 0x01	; 1
     db4:	ed 81       	ldd	r30, Y+5	; 0x05
     db6:	fe 81       	ldd	r31, Y+6	; 0x06
     db8:	80 83       	st	Z, r24
}
     dba:	28 96       	adiw	r28, 0x08	; 8
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <DIO_VidSetPortDirection>:

void DIO_VidSetPortDirection(u8 Copy_u8Port , u8 Copy_u8Direction)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <DIO_VidSetPortDirection+0x6>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <DIO_VidSetPortDirection+0x8>
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <DIO_VidSetPortDirection+0xa>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	8b 83       	std	Y+3, r24	; 0x03
     ddc:	6c 83       	std	Y+4, r22	; 0x04
	    volatile u8 *ddr_reg;

	    switch (Copy_u8Port) {
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	3e 83       	std	Y+6, r19	; 0x06
     de6:	2d 83       	std	Y+5, r18	; 0x05
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	9e 81       	ldd	r25, Y+6	; 0x06
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	91 05       	cpc	r25, r1
     df0:	d1 f0       	breq	.+52     	; 0xe26 <DIO_VidSetPortDirection+0x5a>
     df2:	2d 81       	ldd	r18, Y+5	; 0x05
     df4:	3e 81       	ldd	r19, Y+6	; 0x06
     df6:	22 30       	cpi	r18, 0x02	; 2
     df8:	31 05       	cpc	r19, r1
     dfa:	2c f4       	brge	.+10     	; 0xe06 <DIO_VidSetPortDirection+0x3a>
     dfc:	8d 81       	ldd	r24, Y+5	; 0x05
     dfe:	9e 81       	ldd	r25, Y+6	; 0x06
     e00:	00 97       	sbiw	r24, 0x00	; 0
     e02:	61 f0       	breq	.+24     	; 0xe1c <DIO_VidSetPortDirection+0x50>
     e04:	29 c0       	rjmp	.+82     	; 0xe58 <DIO_VidSetPortDirection+0x8c>
     e06:	2d 81       	ldd	r18, Y+5	; 0x05
     e08:	3e 81       	ldd	r19, Y+6	; 0x06
     e0a:	22 30       	cpi	r18, 0x02	; 2
     e0c:	31 05       	cpc	r19, r1
     e0e:	81 f0       	breq	.+32     	; 0xe30 <DIO_VidSetPortDirection+0x64>
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	83 30       	cpi	r24, 0x03	; 3
     e16:	91 05       	cpc	r25, r1
     e18:	81 f0       	breq	.+32     	; 0xe3a <DIO_VidSetPortDirection+0x6e>
     e1a:	1e c0       	rjmp	.+60     	; 0xe58 <DIO_VidSetPortDirection+0x8c>
	        case Port_A:
	            ddr_reg = &DDRA;
     e1c:	8a e3       	ldi	r24, 0x3A	; 58
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9a 83       	std	Y+2, r25	; 0x02
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	0e c0       	rjmp	.+28     	; 0xe42 <DIO_VidSetPortDirection+0x76>
	            break;
	        case Port_B:
	            ddr_reg = &DDRB;
     e26:	87 e3       	ldi	r24, 0x37	; 55
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <DIO_VidSetPortDirection+0x76>
	            break;
	        case Port_C:
	            ddr_reg = &DDRC;
     e30:	84 e3       	ldi	r24, 0x34	; 52
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
     e38:	04 c0       	rjmp	.+8      	; 0xe42 <DIO_VidSetPortDirection+0x76>
	            break;
	        case Port_D:
	            ddr_reg = &DDRD;
     e3a:	81 e3       	ldi	r24, 0x31	; 49
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
	            break;
	        default:
	            return;
	    }

	    if (Copy_u8Direction == Input) {
     e42:	8c 81       	ldd	r24, Y+4	; 0x04
     e44:	88 23       	and	r24, r24
     e46:	21 f4       	brne	.+8      	; 0xe50 <DIO_VidSetPortDirection+0x84>
	        *ddr_reg = 0x00;
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	10 82       	st	Z, r1
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <DIO_VidSetPortDirection+0x8c>
	    } else {
	        *ddr_reg = 0xff;
     e50:	e9 81       	ldd	r30, Y+1	; 0x01
     e52:	fa 81       	ldd	r31, Y+2	; 0x02
     e54:	8f ef       	ldi	r24, 0xFF	; 255
     e56:	80 83       	st	Z, r24
	    }
}
     e58:	26 96       	adiw	r28, 0x06	; 6
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <DIO_VidSetPortValue>:

void DIO_VidSetPortValue(u8 Copy_u8Port , u8 Copy_u8Value)
{
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <DIO_VidSetPortValue+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <DIO_VidSetPortValue+0x8>
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port) {
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	3c 83       	std	Y+4, r19	; 0x04
     e82:	2b 83       	std	Y+3, r18	; 0x03
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	9c 81       	ldd	r25, Y+4	; 0x04
     e88:	81 30       	cpi	r24, 0x01	; 1
     e8a:	91 05       	cpc	r25, r1
     e8c:	d1 f0       	breq	.+52     	; 0xec2 <DIO_VidSetPortValue+0x58>
     e8e:	2b 81       	ldd	r18, Y+3	; 0x03
     e90:	3c 81       	ldd	r19, Y+4	; 0x04
     e92:	22 30       	cpi	r18, 0x02	; 2
     e94:	31 05       	cpc	r19, r1
     e96:	2c f4       	brge	.+10     	; 0xea2 <DIO_VidSetPortValue+0x38>
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	61 f0       	breq	.+24     	; 0xeb8 <DIO_VidSetPortValue+0x4e>
     ea0:	1e c0       	rjmp	.+60     	; 0xede <DIO_VidSetPortValue+0x74>
     ea2:	2b 81       	ldd	r18, Y+3	; 0x03
     ea4:	3c 81       	ldd	r19, Y+4	; 0x04
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	81 f0       	breq	.+32     	; 0xecc <DIO_VidSetPortValue+0x62>
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	83 30       	cpi	r24, 0x03	; 3
     eb2:	91 05       	cpc	r25, r1
     eb4:	81 f0       	breq	.+32     	; 0xed6 <DIO_VidSetPortValue+0x6c>
     eb6:	13 c0       	rjmp	.+38     	; 0xede <DIO_VidSetPortValue+0x74>
	        case Port_A:
	            PORTA = Copy_u8Value;
     eb8:	eb e3       	ldi	r30, 0x3B	; 59
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	8a 81       	ldd	r24, Y+2	; 0x02
     ebe:	80 83       	st	Z, r24
     ec0:	0e c0       	rjmp	.+28     	; 0xede <DIO_VidSetPortValue+0x74>
	            break;
	        case Port_B:
	            PORTB = Copy_u8Value;
     ec2:	e8 e3       	ldi	r30, 0x38	; 56
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	80 83       	st	Z, r24
     eca:	09 c0       	rjmp	.+18     	; 0xede <DIO_VidSetPortValue+0x74>
	            break;
	        case Port_C:
	            PORTC = Copy_u8Value;
     ecc:	e5 e3       	ldi	r30, 0x35	; 53
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	80 83       	st	Z, r24
     ed4:	04 c0       	rjmp	.+8      	; 0xede <DIO_VidSetPortValue+0x74>
	            break;
	        case Port_D:
	            PORTD = Copy_u8Value;
     ed6:	e2 e3       	ldi	r30, 0x32	; 50
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	80 83       	st	Z, r24
	            break;
	        default:
	            return;
	    }
}
     ede:	0f 90       	pop	r0
     ee0:	0f 90       	pop	r0
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	cf 91       	pop	r28
     ee8:	df 91       	pop	r29
     eea:	08 95       	ret

00000eec <DIO_VidGetPortValue>:


void DIO_VidGetPortValue(u8 Copy_u8Port , u8 * pu8Data)
{
     eec:	df 93       	push	r29
     eee:	cf 93       	push	r28
     ef0:	00 d0       	rcall	.+0      	; 0xef2 <DIO_VidGetPortValue+0x6>
     ef2:	00 d0       	rcall	.+0      	; 0xef4 <DIO_VidGetPortValue+0x8>
     ef4:	0f 92       	push	r0
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	89 83       	std	Y+1, r24	; 0x01
     efc:	7b 83       	std	Y+3, r23	; 0x03
     efe:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
     f00:	89 81       	ldd	r24, Y+1	; 0x01
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	3d 83       	std	Y+5, r19	; 0x05
     f08:	2c 83       	std	Y+4, r18	; 0x04
     f0a:	8c 81       	ldd	r24, Y+4	; 0x04
     f0c:	9d 81       	ldd	r25, Y+5	; 0x05
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	91 05       	cpc	r25, r1
     f12:	e1 f0       	breq	.+56     	; 0xf4c <DIO_VidGetPortValue+0x60>
     f14:	2c 81       	ldd	r18, Y+4	; 0x04
     f16:	3d 81       	ldd	r19, Y+5	; 0x05
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	2c f4       	brge	.+10     	; 0xf28 <DIO_VidGetPortValue+0x3c>
     f1e:	8c 81       	ldd	r24, Y+4	; 0x04
     f20:	9d 81       	ldd	r25, Y+5	; 0x05
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	61 f0       	breq	.+24     	; 0xf3e <DIO_VidGetPortValue+0x52>
     f26:	26 c0       	rjmp	.+76     	; 0xf74 <DIO_VidGetPortValue+0x88>
     f28:	2c 81       	ldd	r18, Y+4	; 0x04
     f2a:	3d 81       	ldd	r19, Y+5	; 0x05
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	a1 f0       	breq	.+40     	; 0xf5a <DIO_VidGetPortValue+0x6e>
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	9d 81       	ldd	r25, Y+5	; 0x05
     f36:	83 30       	cpi	r24, 0x03	; 3
     f38:	91 05       	cpc	r25, r1
     f3a:	b1 f0       	breq	.+44     	; 0xf68 <DIO_VidGetPortValue+0x7c>
     f3c:	1b c0       	rjmp	.+54     	; 0xf74 <DIO_VidGetPortValue+0x88>
	{
		case Port_A : 
			*pu8Data = PINA;
     f3e:	e9 e3       	ldi	r30, 0x39	; 57
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	ea 81       	ldd	r30, Y+2	; 0x02
     f46:	fb 81       	ldd	r31, Y+3	; 0x03
     f48:	80 83       	st	Z, r24
     f4a:	14 c0       	rjmp	.+40     	; 0xf74 <DIO_VidGetPortValue+0x88>
			break ;

		case Port_B : 
			*pu8Data = PINB;
     f4c:	e6 e3       	ldi	r30, 0x36	; 54
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	ea 81       	ldd	r30, Y+2	; 0x02
     f54:	fb 81       	ldd	r31, Y+3	; 0x03
     f56:	80 83       	st	Z, r24
     f58:	0d c0       	rjmp	.+26     	; 0xf74 <DIO_VidGetPortValue+0x88>
			break ;

		case Port_C : 
			*pu8Data = PINC;
     f5a:	e3 e3       	ldi	r30, 0x33	; 51
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	ea 81       	ldd	r30, Y+2	; 0x02
     f62:	fb 81       	ldd	r31, Y+3	; 0x03
     f64:	80 83       	st	Z, r24
     f66:	06 c0       	rjmp	.+12     	; 0xf74 <DIO_VidGetPortValue+0x88>
			break ;

		case Port_D : 
			*pu8Data = PIND;
     f68:	e0 e3       	ldi	r30, 0x30	; 48
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	ea 81       	ldd	r30, Y+2	; 0x02
     f70:	fb 81       	ldd	r31, Y+3	; 0x03
     f72:	80 83       	st	Z, r24
			break ;
	}
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <DIO_VidSetMSB>:


void DIO_VidSetMSB(u8 Copy_u8Port , u8 Copy_u8Value){
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	00 d0       	rcall	.+0      	; 0xf8a <DIO_VidSetMSB+0x6>
     f8a:	00 d0       	rcall	.+0      	; 0xf8c <DIO_VidSetMSB+0x8>
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	89 83       	std	Y+1, r24	; 0x01
     f92:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	3c 83       	std	Y+4, r19	; 0x04
     f9c:	2b 83       	std	Y+3, r18	; 0x03
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	91 05       	cpc	r25, r1
     fa6:	09 f1       	breq	.+66     	; 0xfea <DIO_VidSetMSB+0x66>
     fa8:	2b 81       	ldd	r18, Y+3	; 0x03
     faa:	3c 81       	ldd	r19, Y+4	; 0x04
     fac:	22 30       	cpi	r18, 0x02	; 2
     fae:	31 05       	cpc	r19, r1
     fb0:	2c f4       	brge	.+10     	; 0xfbc <DIO_VidSetMSB+0x38>
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	61 f0       	breq	.+24     	; 0xfd2 <DIO_VidSetMSB+0x4e>
     fba:	3a c0       	rjmp	.+116    	; 0x1030 <DIO_VidSetMSB+0xac>
     fbc:	2b 81       	ldd	r18, Y+3	; 0x03
     fbe:	3c 81       	ldd	r19, Y+4	; 0x04
     fc0:	22 30       	cpi	r18, 0x02	; 2
     fc2:	31 05       	cpc	r19, r1
     fc4:	f1 f0       	breq	.+60     	; 0x1002 <DIO_VidSetMSB+0x7e>
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	9c 81       	ldd	r25, Y+4	; 0x04
     fca:	83 30       	cpi	r24, 0x03	; 3
     fcc:	91 05       	cpc	r25, r1
     fce:	29 f1       	breq	.+74     	; 0x101a <DIO_VidSetMSB+0x96>
     fd0:	2f c0       	rjmp	.+94     	; 0x1030 <DIO_VidSetMSB+0xac>
	{
		case Port_A :
			PORTA = (PORTA & 0x0F) | (Copy_u8Value & 0xF0);
     fd2:	ab e3       	ldi	r26, 0x3B	; 59
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	eb e3       	ldi	r30, 0x3B	; 59
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	98 2f       	mov	r25, r24
     fde:	9f 70       	andi	r25, 0x0F	; 15
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	80 7f       	andi	r24, 0xF0	; 240
     fe4:	89 2b       	or	r24, r25
     fe6:	8c 93       	st	X, r24
     fe8:	23 c0       	rjmp	.+70     	; 0x1030 <DIO_VidSetMSB+0xac>
			break ;

		case Port_B :
			PORTB = (PORTB & 0x0F) | (Copy_u8Value & 0xF0);
     fea:	a8 e3       	ldi	r26, 0x38	; 56
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e8 e3       	ldi	r30, 0x38	; 56
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	98 2f       	mov	r25, r24
     ff6:	9f 70       	andi	r25, 0x0F	; 15
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	80 7f       	andi	r24, 0xF0	; 240
     ffc:	89 2b       	or	r24, r25
     ffe:	8c 93       	st	X, r24
    1000:	17 c0       	rjmp	.+46     	; 0x1030 <DIO_VidSetMSB+0xac>
			break ;

		case Port_C :
			PORTC = (PORTC & 0x0F) | (Copy_u8Value & 0xF0);
    1002:	a5 e3       	ldi	r26, 0x35	; 53
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e5 e3       	ldi	r30, 0x35	; 53
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	98 2f       	mov	r25, r24
    100e:	9f 70       	andi	r25, 0x0F	; 15
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	80 7f       	andi	r24, 0xF0	; 240
    1014:	89 2b       	or	r24, r25
    1016:	8c 93       	st	X, r24
    1018:	0b c0       	rjmp	.+22     	; 0x1030 <DIO_VidSetMSB+0xac>
			break ;

		case Port_D :
			PORTD = (PORTD & 0x0F) | (Copy_u8Value & 0xF0);
    101a:	a2 e3       	ldi	r26, 0x32	; 50
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e2 e3       	ldi	r30, 0x32	; 50
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	98 2f       	mov	r25, r24
    1026:	9f 70       	andi	r25, 0x0F	; 15
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	80 7f       	andi	r24, 0xF0	; 240
    102c:	89 2b       	or	r24, r25
    102e:	8c 93       	st	X, r24
			break ;
	}
}
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <DIO_VidSetLSB>:


void DIO_VidSetLSB(u8 Copy_u8Port , u8 Copy_u8Value){
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	00 d0       	rcall	.+0      	; 0x1044 <DIO_VidSetLSB+0x6>
    1044:	00 d0       	rcall	.+0      	; 0x1046 <DIO_VidSetLSB+0x8>
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	89 83       	std	Y+1, r24	; 0x01
    104c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port)
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	28 2f       	mov	r18, r24
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	3c 83       	std	Y+4, r19	; 0x04
    1056:	2b 83       	std	Y+3, r18	; 0x03
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	91 05       	cpc	r25, r1
    1060:	41 f1       	breq	.+80     	; 0x10b2 <DIO_VidSetLSB+0x74>
    1062:	2b 81       	ldd	r18, Y+3	; 0x03
    1064:	3c 81       	ldd	r19, Y+4	; 0x04
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	31 05       	cpc	r19, r1
    106a:	2c f4       	brge	.+10     	; 0x1076 <DIO_VidSetLSB+0x38>
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	61 f0       	breq	.+24     	; 0x108c <DIO_VidSetLSB+0x4e>
    1074:	56 c0       	rjmp	.+172    	; 0x1122 <DIO_VidSetLSB+0xe4>
    1076:	2b 81       	ldd	r18, Y+3	; 0x03
    1078:	3c 81       	ldd	r19, Y+4	; 0x04
    107a:	22 30       	cpi	r18, 0x02	; 2
    107c:	31 05       	cpc	r19, r1
    107e:	61 f1       	breq	.+88     	; 0x10d8 <DIO_VidSetLSB+0x9a>
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	83 30       	cpi	r24, 0x03	; 3
    1086:	91 05       	cpc	r25, r1
    1088:	d1 f1       	breq	.+116    	; 0x10fe <DIO_VidSetLSB+0xc0>
    108a:	4b c0       	rjmp	.+150    	; 0x1122 <DIO_VidSetLSB+0xe4>
	{
		case Port_A :
			PORTA = (PORTA & 0x0F) | (Copy_u8Value << 4);
    108c:	ab e3       	ldi	r26, 0x3B	; 59
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	eb e3       	ldi	r30, 0x3B	; 59
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	28 2f       	mov	r18, r24
    1098:	2f 70       	andi	r18, 0x0F	; 15
    109a:	8a 81       	ldd	r24, Y+2	; 0x02
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	82 95       	swap	r24
    10a2:	92 95       	swap	r25
    10a4:	90 7f       	andi	r25, 0xF0	; 240
    10a6:	98 27       	eor	r25, r24
    10a8:	80 7f       	andi	r24, 0xF0	; 240
    10aa:	98 27       	eor	r25, r24
    10ac:	82 2b       	or	r24, r18
    10ae:	8c 93       	st	X, r24
    10b0:	38 c0       	rjmp	.+112    	; 0x1122 <DIO_VidSetLSB+0xe4>
			break ;

		case Port_B :
			PORTB = (PORTB & 0x0F) | (Copy_u8Value << 4);
    10b2:	a8 e3       	ldi	r26, 0x38	; 56
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e8 e3       	ldi	r30, 0x38	; 56
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	28 2f       	mov	r18, r24
    10be:	2f 70       	andi	r18, 0x0F	; 15
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	88 2f       	mov	r24, r24
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	82 95       	swap	r24
    10c8:	92 95       	swap	r25
    10ca:	90 7f       	andi	r25, 0xF0	; 240
    10cc:	98 27       	eor	r25, r24
    10ce:	80 7f       	andi	r24, 0xF0	; 240
    10d0:	98 27       	eor	r25, r24
    10d2:	82 2b       	or	r24, r18
    10d4:	8c 93       	st	X, r24
    10d6:	25 c0       	rjmp	.+74     	; 0x1122 <DIO_VidSetLSB+0xe4>
			break ;

		case Port_C :
			PORTC = (PORTC & 0x0F) | (Copy_u8Value << 4);
    10d8:	a5 e3       	ldi	r26, 0x35	; 53
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e3       	ldi	r30, 0x35	; 53
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	28 2f       	mov	r18, r24
    10e4:	2f 70       	andi	r18, 0x0F	; 15
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	88 2f       	mov	r24, r24
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	82 95       	swap	r24
    10ee:	92 95       	swap	r25
    10f0:	90 7f       	andi	r25, 0xF0	; 240
    10f2:	98 27       	eor	r25, r24
    10f4:	80 7f       	andi	r24, 0xF0	; 240
    10f6:	98 27       	eor	r25, r24
    10f8:	82 2b       	or	r24, r18
    10fa:	8c 93       	st	X, r24
    10fc:	12 c0       	rjmp	.+36     	; 0x1122 <DIO_VidSetLSB+0xe4>
			break ;

		case Port_D :
			PORTD = (PORTD & 0x0F) | (Copy_u8Value << 4);
    10fe:	a2 e3       	ldi	r26, 0x32	; 50
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	e2 e3       	ldi	r30, 0x32	; 50
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	28 2f       	mov	r18, r24
    110a:	2f 70       	andi	r18, 0x0F	; 15
    110c:	8a 81       	ldd	r24, Y+2	; 0x02
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	82 95       	swap	r24
    1114:	92 95       	swap	r25
    1116:	90 7f       	andi	r25, 0xF0	; 240
    1118:	98 27       	eor	r25, r24
    111a:	80 7f       	andi	r24, 0xF0	; 240
    111c:	98 27       	eor	r25, r24
    111e:	82 2b       	or	r24, r18
    1120:	8c 93       	st	X, r24
			break ;
	}
}
    1122:	0f 90       	pop	r0
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <KPD_VidGetPressedKey>:
#include "DIO_interface.h"
#include "KPD_config.h"
#include "KPD_interface.h"


u8 KPD_VidGetPressedKey(){
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <KPD_VidGetPressedKey+0x6>
    1136:	00 d0       	rcall	.+0      	; 0x1138 <KPD_VidGetPressedKey+0x8>
    1138:	0f 92       	push	r0
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62

	//RETURNED VALUE LOCAL PRESSED KEY
	u8 LPK = KPD_NO_PRESSED;
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	8b 83       	std	Y+3, r24	; 0x03
	//LOCAL KEYPAD COLUMN ARRAY
	static u8 L_KPD_COL_ARR[KPD_COL] = {KPD_COL1PIN,KPD_COL2PIN,KPD_COL3PIN,KPD_COL4PIN};
	//LOCAL KEYPAD ROW ARRAY
	static u8 L_KPD_ROW_ARR[KPD_ROW] = {KPD_ROW1PIN,KPD_ROW2PIN,KPD_ROW3PIN,KPD_ROW4PIN};

	for(u8 L_COL_COUNTER = 0 ; L_COL_COUNTER < KPD_COL ; L_COL_COUNTER++){
    1142:	1a 82       	std	Y+2, r1	; 0x02
    1144:	5e c0       	rjmp	.+188    	; 0x1202 <KPD_VidGetPressedKey+0xd2>
		//SET COLUMN LOW
		DIO_VidSetPinValue(KPD_PORT , L_KPD_COL_ARR[L_COL_COUNTER],Pin_Low);
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	88 2f       	mov	r24, r24
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	fc 01       	movw	r30, r24
    114e:	e0 59       	subi	r30, 0x90	; 144
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	90 81       	ld	r25, Z
    1154:	83 e0       	ldi	r24, 0x03	; 3
    1156:	69 2f       	mov	r22, r25
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>
		for(u8 L_ROW_COUNTER = 0 ; L_ROW_COUNTER < KPD_ROW ; L_ROW_COUNTER++){
    115e:	19 82       	std	Y+1, r1	; 0x01
    1160:	3d c0       	rjmp	.+122    	; 0x11dc <KPD_VidGetPressedKey+0xac>
			//GET VALUE OF ROW
			DIO_VidGetPinValue(KPD_PORT, L_KPD_ROW_ARR[L_ROW_COUNTER],&L_PIN_STATE);
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	fc 01       	movw	r30, r24
    116a:	e4 59       	subi	r30, 0x94	; 148
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	90 81       	ld	r25, Z
    1170:	9e 01       	movw	r18, r28
    1172:	2c 5f       	subi	r18, 0xFC	; 252
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	83 e0       	ldi	r24, 0x03	; 3
    1178:	69 2f       	mov	r22, r25
    117a:	a9 01       	movw	r20, r18
    117c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_VidGetPinValue>
			//CHECK IF PRESSED
			if(L_PIN_STATE == Pin_Low){
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	88 23       	and	r24, r24
    1184:	41 f5       	brne	.+80     	; 0x11d6 <KPD_VidGetPressedKey+0xa6>
				//SET WHIVH BUTTON PRESSED INTO LOCAL PRESSED KEYPAD
				LPK = L_KPD_ARR[L_ROW_COUNTER][L_COL_COUNTER];
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	48 2f       	mov	r20, r24
    118a:	50 e0       	ldi	r21, 0x00	; 0
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	ca 01       	movw	r24, r20
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	82 0f       	add	r24, r18
    119e:	93 1f       	adc	r25, r19
    11a0:	fc 01       	movw	r30, r24
    11a2:	ec 58       	subi	r30, 0x8C	; 140
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	80 81       	ld	r24, Z
    11a8:	8b 83       	std	Y+3, r24	; 0x03
    11aa:	0f c0       	rjmp	.+30     	; 0x11ca <KPD_VidGetPressedKey+0x9a>
				//CHECK IF STILL PRESSED
				while(L_PIN_STATE == Pin_Low){
					//GET VALUE OF ROW
					DIO_VidGetPinValue(KPD_PORT, L_KPD_ROW_ARR[L_ROW_COUNTER],&L_PIN_STATE);
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	fc 01       	movw	r30, r24
    11b4:	e4 59       	subi	r30, 0x94	; 148
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	90 81       	ld	r25, Z
    11ba:	9e 01       	movw	r18, r28
    11bc:	2c 5f       	subi	r18, 0xFC	; 252
    11be:	3f 4f       	sbci	r19, 0xFF	; 255
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	69 2f       	mov	r22, r25
    11c4:	a9 01       	movw	r20, r18
    11c6:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_VidGetPinValue>
			//CHECK IF PRESSED
			if(L_PIN_STATE == Pin_Low){
				//SET WHIVH BUTTON PRESSED INTO LOCAL PRESSED KEYPAD
				LPK = L_KPD_ARR[L_ROW_COUNTER][L_COL_COUNTER];
				//CHECK IF STILL PRESSED
				while(L_PIN_STATE == Pin_Low){
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	88 23       	and	r24, r24
    11ce:	71 f3       	breq	.-36     	; 0x11ac <KPD_VidGetPressedKey+0x7c>
					//GET VALUE OF ROW
					DIO_VidGetPinValue(KPD_PORT, L_KPD_ROW_ARR[L_ROW_COUNTER],&L_PIN_STATE);
				}
				//RETURN LOCAL PRESSED KEYPAD OR BUTTON WHICH PRESSED
				return LPK;
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	1c c0       	rjmp	.+56     	; 0x120e <KPD_VidGetPressedKey+0xde>
	static u8 L_KPD_ROW_ARR[KPD_ROW] = {KPD_ROW1PIN,KPD_ROW2PIN,KPD_ROW3PIN,KPD_ROW4PIN};

	for(u8 L_COL_COUNTER = 0 ; L_COL_COUNTER < KPD_COL ; L_COL_COUNTER++){
		//SET COLUMN LOW
		DIO_VidSetPinValue(KPD_PORT , L_KPD_COL_ARR[L_COL_COUNTER],Pin_Low);
		for(u8 L_ROW_COUNTER = 0 ; L_ROW_COUNTER < KPD_ROW ; L_ROW_COUNTER++){
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	08 f4       	brcc	.+2      	; 0x11e4 <KPD_VidGetPressedKey+0xb4>
    11e2:	bf cf       	rjmp	.-130    	; 0x1162 <KPD_VidGetPressedKey+0x32>
				}
				//RETURN LOCAL PRESSED KEYPAD OR BUTTON WHICH PRESSED
				return LPK;
			}
		}
		DIO_VidSetPinValue(KPD_PORT,L_KPD_COL_ARR[L_COL_COUNTER],Pin_High);
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	fc 01       	movw	r30, r24
    11ec:	e0 59       	subi	r30, 0x90	; 144
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	90 81       	ld	r25, Z
    11f2:	83 e0       	ldi	r24, 0x03	; 3
    11f4:	69 2f       	mov	r22, r25
    11f6:	41 e0       	ldi	r20, 0x01	; 1
    11f8:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>
	//LOCAL KEYPAD COLUMN ARRAY
	static u8 L_KPD_COL_ARR[KPD_COL] = {KPD_COL1PIN,KPD_COL2PIN,KPD_COL3PIN,KPD_COL4PIN};
	//LOCAL KEYPAD ROW ARRAY
	static u8 L_KPD_ROW_ARR[KPD_ROW] = {KPD_ROW1PIN,KPD_ROW2PIN,KPD_ROW3PIN,KPD_ROW4PIN};

	for(u8 L_COL_COUNTER = 0 ; L_COL_COUNTER < KPD_COL ; L_COL_COUNTER++){
    11fc:	8a 81       	ldd	r24, Y+2	; 0x02
    11fe:	8f 5f       	subi	r24, 0xFF	; 255
    1200:	8a 83       	std	Y+2, r24	; 0x02
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	08 f4       	brcc	.+2      	; 0x120a <KPD_VidGetPressedKey+0xda>
    1208:	9e cf       	rjmp	.-196    	; 0x1146 <KPD_VidGetPressedKey+0x16>
				return LPK;
			}
		}
		DIO_VidSetPinValue(KPD_PORT,L_KPD_COL_ARR[L_COL_COUNTER],Pin_High);
	}
	return LPK;
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	cf 91       	pop	r28
    121c:	df 91       	pop	r29
    121e:	08 95       	ret

00001220 <KPD_VidInit>:

void KPD_VidInit(){
    1220:	df 93       	push	r29
    1222:	cf 93       	push	r28
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62

	DIO_VidSetPinDirection(KPD_PORT,KPD_COL1PIN,Output);
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,KPD_COL2PIN,Output);
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	61 e0       	ldi	r22, 0x01	; 1
    1236:	41 e0       	ldi	r20, 0x01	; 1
    1238:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,KPD_COL3PIN,Output);
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	62 e0       	ldi	r22, 0x02	; 2
    1240:	41 e0       	ldi	r20, 0x01	; 1
    1242:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,KPD_COL4PIN,Output);
    1246:	83 e0       	ldi	r24, 0x03	; 3
    1248:	63 e0       	ldi	r22, 0x03	; 3
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	DIO_VidSetPinDirection(KPD_PORT,KPD_ROW1PIN,Input);
    1250:	83 e0       	ldi	r24, 0x03	; 3
    1252:	64 e0       	ldi	r22, 0x04	; 4
    1254:	40 e0       	ldi	r20, 0x00	; 0
    1256:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,KPD_ROW2PIN,Input);
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	65 e0       	ldi	r22, 0x05	; 5
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,KPD_ROW3PIN,Input);
    1264:	83 e0       	ldi	r24, 0x03	; 3
    1266:	66 e0       	ldi	r22, 0x06	; 6
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(KPD_PORT,KPD_ROW4PIN,Input);
    126e:	83 e0       	ldi	r24, 0x03	; 3
    1270:	67 e0       	ldi	r22, 0x07	; 7
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	DIO_VidSetPortValue(KPD_PORT,0xff);
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	6f ef       	ldi	r22, 0xFF	; 255
    127c:	0e 94 35 07 	call	0xe6a	; 0xe6a <DIO_VidSetPortValue>
}
    1280:	cf 91       	pop	r28
    1282:	df 91       	pop	r29
    1284:	08 95       	ret

00001286 <LCD_VidSendCommand>:
#include <stdio.h>
#include <util/delay.h>

int LOC=0;
//SEND COMMAN FUNCTION
void LCD_VidSendCommand( u8 Copy_u8Command){
    1286:	df 93       	push	r29
    1288:	cf 93       	push	r28
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	6d 97       	sbiw	r28, 0x1d	; 29
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	de bf       	out	0x3e, r29	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);

#elif LCD_MODE == 4

	/* SEND 4 MSBs */
	DIO_VidSetMSB(LCD_DATA_PORT,Copy_u8Command);
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    12a0:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_VidSetMSB>

	//RW LOW  -->  WRITE ON LCD
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,Pin_Low);
    12a4:	82 e0       	ldi	r24, 0x02	; 2
    12a6:	61 e0       	ldi	r22, 0x01	; 1
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>

	//RS LOW  -->  SEND COMMAND
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,Pin_Low);
    12ae:	82 e0       	ldi	r24, 0x02	; 2
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	40 e0       	ldi	r20, 0x00	; 0
    12b4:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>

	//E HIGH  -->  ENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_High);
    12b8:	82 e0       	ldi	r24, 0x02	; 2
    12ba:	62 e0       	ldi	r22, 0x02	; 2
    12bc:	41 e0       	ldi	r20, 0x01	; 1
    12be:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	a0 e0       	ldi	r26, 0x00	; 0
    12c8:	b0 e4       	ldi	r27, 0x40	; 64
    12ca:	89 8f       	std	Y+25, r24	; 0x19
    12cc:	9a 8f       	std	Y+26, r25	; 0x1a
    12ce:	ab 8f       	std	Y+27, r26	; 0x1b
    12d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d2:	69 8d       	ldd	r22, Y+25	; 0x19
    12d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	4a e7       	ldi	r20, 0x7A	; 122
    12e0:	55 e4       	ldi	r21, 0x45	; 69
    12e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	8d 8b       	std	Y+21, r24	; 0x15
    12ec:	9e 8b       	std	Y+22, r25	; 0x16
    12ee:	af 8b       	std	Y+23, r26	; 0x17
    12f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12f2:	6d 89       	ldd	r22, Y+21	; 0x15
    12f4:	7e 89       	ldd	r23, Y+22	; 0x16
    12f6:	8f 89       	ldd	r24, Y+23	; 0x17
    12f8:	98 8d       	ldd	r25, Y+24	; 0x18
    12fa:	20 e0       	ldi	r18, 0x00	; 0
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	40 e8       	ldi	r20, 0x80	; 128
    1300:	5f e3       	ldi	r21, 0x3F	; 63
    1302:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1306:	88 23       	and	r24, r24
    1308:	2c f4       	brge	.+10     	; 0x1314 <LCD_VidSendCommand+0x8e>
		__ticks = 1;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	9c 8b       	std	Y+20, r25	; 0x14
    1310:	8b 8b       	std	Y+19, r24	; 0x13
    1312:	3f c0       	rjmp	.+126    	; 0x1392 <LCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    1314:	6d 89       	ldd	r22, Y+21	; 0x15
    1316:	7e 89       	ldd	r23, Y+22	; 0x16
    1318:	8f 89       	ldd	r24, Y+23	; 0x17
    131a:	98 8d       	ldd	r25, Y+24	; 0x18
    131c:	20 e0       	ldi	r18, 0x00	; 0
    131e:	3f ef       	ldi	r19, 0xFF	; 255
    1320:	4f e7       	ldi	r20, 0x7F	; 127
    1322:	57 e4       	ldi	r21, 0x47	; 71
    1324:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1328:	18 16       	cp	r1, r24
    132a:	4c f5       	brge	.+82     	; 0x137e <LCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    132c:	69 8d       	ldd	r22, Y+25	; 0x19
    132e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	40 e2       	ldi	r20, 0x20	; 32
    133a:	51 e4       	ldi	r21, 0x41	; 65
    133c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	bc 01       	movw	r22, r24
    1346:	cd 01       	movw	r24, r26
    1348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	9c 8b       	std	Y+20, r25	; 0x14
    1352:	8b 8b       	std	Y+19, r24	; 0x13
    1354:	0f c0       	rjmp	.+30     	; 0x1374 <LCD_VidSendCommand+0xee>
    1356:	80 e9       	ldi	r24, 0x90	; 144
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	9a 8b       	std	Y+18, r25	; 0x12
    135c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    135e:	89 89       	ldd	r24, Y+17	; 0x11
    1360:	9a 89       	ldd	r25, Y+18	; 0x12
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <LCD_VidSendCommand+0xdc>
    1366:	9a 8b       	std	Y+18, r25	; 0x12
    1368:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136a:	8b 89       	ldd	r24, Y+19	; 0x13
    136c:	9c 89       	ldd	r25, Y+20	; 0x14
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	9c 8b       	std	Y+20, r25	; 0x14
    1372:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1374:	8b 89       	ldd	r24, Y+19	; 0x13
    1376:	9c 89       	ldd	r25, Y+20	; 0x14
    1378:	00 97       	sbiw	r24, 0x00	; 0
    137a:	69 f7       	brne	.-38     	; 0x1356 <LCD_VidSendCommand+0xd0>
    137c:	14 c0       	rjmp	.+40     	; 0x13a6 <LCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137e:	6d 89       	ldd	r22, Y+21	; 0x15
    1380:	7e 89       	ldd	r23, Y+22	; 0x16
    1382:	8f 89       	ldd	r24, Y+23	; 0x17
    1384:	98 8d       	ldd	r25, Y+24	; 0x18
    1386:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	9c 8b       	std	Y+20, r25	; 0x14
    1390:	8b 8b       	std	Y+19, r24	; 0x13
    1392:	8b 89       	ldd	r24, Y+19	; 0x13
    1394:	9c 89       	ldd	r25, Y+20	; 0x14
    1396:	98 8b       	std	Y+16, r25	; 0x10
    1398:	8f 87       	std	Y+15, r24	; 0x0f
    139a:	8f 85       	ldd	r24, Y+15	; 0x0f
    139c:	98 89       	ldd	r25, Y+16	; 0x10
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <LCD_VidSendCommand+0x118>
    13a2:	98 8b       	std	Y+16, r25	; 0x10
    13a4:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	//E LOW  -->  UNENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	62 e0       	ldi	r22, 0x02	; 2
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>

	                //--------------------------//

	/* SEND 4 LSBs */
	DIO_VidSetLSB(LCD_DATA_PORT,Copy_u8Command);
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    13b4:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_VidSetLSB>

	//E HIGH  -->  ENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_High);
    13b8:	82 e0       	ldi	r24, 0x02	; 2
    13ba:	62 e0       	ldi	r22, 0x02	; 2
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	a0 e0       	ldi	r26, 0x00	; 0
    13c8:	b0 e4       	ldi	r27, 0x40	; 64
    13ca:	8b 87       	std	Y+11, r24	; 0x0b
    13cc:	9c 87       	std	Y+12, r25	; 0x0c
    13ce:	ad 87       	std	Y+13, r26	; 0x0d
    13d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    13d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    13d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    13d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	4a e7       	ldi	r20, 0x7A	; 122
    13e0:	55 e4       	ldi	r21, 0x45	; 69
    13e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	8f 83       	std	Y+7, r24	; 0x07
    13ec:	98 87       	std	Y+8, r25	; 0x08
    13ee:	a9 87       	std	Y+9, r26	; 0x09
    13f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13f2:	6f 81       	ldd	r22, Y+7	; 0x07
    13f4:	78 85       	ldd	r23, Y+8	; 0x08
    13f6:	89 85       	ldd	r24, Y+9	; 0x09
    13f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	30 e0       	ldi	r19, 0x00	; 0
    13fe:	40 e8       	ldi	r20, 0x80	; 128
    1400:	5f e3       	ldi	r21, 0x3F	; 63
    1402:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	2c f4       	brge	.+10     	; 0x1414 <LCD_VidSendCommand+0x18e>
		__ticks = 1;
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	3f c0       	rjmp	.+126    	; 0x1492 <LCD_VidSendCommand+0x20c>
	else if (__tmp > 65535)
    1414:	6f 81       	ldd	r22, Y+7	; 0x07
    1416:	78 85       	ldd	r23, Y+8	; 0x08
    1418:	89 85       	ldd	r24, Y+9	; 0x09
    141a:	9a 85       	ldd	r25, Y+10	; 0x0a
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	3f ef       	ldi	r19, 0xFF	; 255
    1420:	4f e7       	ldi	r20, 0x7F	; 127
    1422:	57 e4       	ldi	r21, 0x47	; 71
    1424:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1428:	18 16       	cp	r1, r24
    142a:	4c f5       	brge	.+82     	; 0x147e <LCD_VidSendCommand+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    142c:	6b 85       	ldd	r22, Y+11	; 0x0b
    142e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1430:	8d 85       	ldd	r24, Y+13	; 0x0d
    1432:	9e 85       	ldd	r25, Y+14	; 0x0e
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e2       	ldi	r20, 0x20	; 32
    143a:	51 e4       	ldi	r21, 0x41	; 65
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	bc 01       	movw	r22, r24
    1446:	cd 01       	movw	r24, r26
    1448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	9e 83       	std	Y+6, r25	; 0x06
    1452:	8d 83       	std	Y+5, r24	; 0x05
    1454:	0f c0       	rjmp	.+30     	; 0x1474 <LCD_VidSendCommand+0x1ee>
    1456:	80 e9       	ldi	r24, 0x90	; 144
    1458:	91 e0       	ldi	r25, 0x01	; 1
    145a:	9c 83       	std	Y+4, r25	; 0x04
    145c:	8b 83       	std	Y+3, r24	; 0x03
    145e:	8b 81       	ldd	r24, Y+3	; 0x03
    1460:	9c 81       	ldd	r25, Y+4	; 0x04
    1462:	01 97       	sbiw	r24, 0x01	; 1
    1464:	f1 f7       	brne	.-4      	; 0x1462 <LCD_VidSendCommand+0x1dc>
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	9e 83       	std	Y+6, r25	; 0x06
    1472:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	69 f7       	brne	.-38     	; 0x1456 <LCD_VidSendCommand+0x1d0>
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <LCD_VidSendCommand+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    147e:	6f 81       	ldd	r22, Y+7	; 0x07
    1480:	78 85       	ldd	r23, Y+8	; 0x08
    1482:	89 85       	ldd	r24, Y+9	; 0x09
    1484:	9a 85       	ldd	r25, Y+10	; 0x0a
    1486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    148a:	dc 01       	movw	r26, r24
    148c:	cb 01       	movw	r24, r22
    148e:	9e 83       	std	Y+6, r25	; 0x06
    1490:	8d 83       	std	Y+5, r24	; 0x05
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	9a 83       	std	Y+2, r25	; 0x02
    1498:	89 83       	std	Y+1, r24	; 0x01
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	01 97       	sbiw	r24, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <LCD_VidSendCommand+0x218>
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	//E LOW  -->  UNENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);
    14a6:	82 e0       	ldi	r24, 0x02	; 2
    14a8:	62 e0       	ldi	r22, 0x02	; 2
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>

#endif

}
    14b0:	6d 96       	adiw	r28, 0x1d	; 29
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <LCD_VidSendData>:


//SEND DATA FUNCTION
void LCD_VidSendData( u8 Copy_u8Data){
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	6d 97       	sbiw	r28, 0x1d	; 29
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	8d 8f       	std	Y+29, r24	; 0x1d
#elif LCD_MODE == 4



	/* SEND 4 MSBs */
	DIO_VidSetMSB(LCD_DATA_PORT,Copy_u8Data);
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    14dc:	0e 94 c2 07 	call	0xf84	; 0xf84 <DIO_VidSetMSB>

	//RW LOW  -->  WRITE ON LCD
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RW_PIN,Pin_Low);
    14e0:	82 e0       	ldi	r24, 0x02	; 2
    14e2:	61 e0       	ldi	r22, 0x01	; 1
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>

	//RS HIGH  -->  SEND DATA
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_RS_PIN,Pin_High);
    14ea:	82 e0       	ldi	r24, 0x02	; 2
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	41 e0       	ldi	r20, 0x01	; 1
    14f0:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>

	//E HIGH  -->  ENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_High);
    14f4:	82 e0       	ldi	r24, 0x02	; 2
    14f6:	62 e0       	ldi	r22, 0x02	; 2
    14f8:	41 e0       	ldi	r20, 0x01	; 1
    14fa:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e0       	ldi	r26, 0x00	; 0
    1504:	b0 e4       	ldi	r27, 0x40	; 64
    1506:	89 8f       	std	Y+25, r24	; 0x19
    1508:	9a 8f       	std	Y+26, r25	; 0x1a
    150a:	ab 8f       	std	Y+27, r26	; 0x1b
    150c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    150e:	69 8d       	ldd	r22, Y+25	; 0x19
    1510:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1512:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1514:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	4a e7       	ldi	r20, 0x7A	; 122
    151c:	55 e4       	ldi	r21, 0x45	; 69
    151e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	8d 8b       	std	Y+21, r24	; 0x15
    1528:	9e 8b       	std	Y+22, r25	; 0x16
    152a:	af 8b       	std	Y+23, r26	; 0x17
    152c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    152e:	6d 89       	ldd	r22, Y+21	; 0x15
    1530:	7e 89       	ldd	r23, Y+22	; 0x16
    1532:	8f 89       	ldd	r24, Y+23	; 0x17
    1534:	98 8d       	ldd	r25, Y+24	; 0x18
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e8       	ldi	r20, 0x80	; 128
    153c:	5f e3       	ldi	r21, 0x3F	; 63
    153e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1542:	88 23       	and	r24, r24
    1544:	2c f4       	brge	.+10     	; 0x1550 <LCD_VidSendData+0x8e>
		__ticks = 1;
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9c 8b       	std	Y+20, r25	; 0x14
    154c:	8b 8b       	std	Y+19, r24	; 0x13
    154e:	3f c0       	rjmp	.+126    	; 0x15ce <LCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    1550:	6d 89       	ldd	r22, Y+21	; 0x15
    1552:	7e 89       	ldd	r23, Y+22	; 0x16
    1554:	8f 89       	ldd	r24, Y+23	; 0x17
    1556:	98 8d       	ldd	r25, Y+24	; 0x18
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	3f ef       	ldi	r19, 0xFF	; 255
    155c:	4f e7       	ldi	r20, 0x7F	; 127
    155e:	57 e4       	ldi	r21, 0x47	; 71
    1560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1564:	18 16       	cp	r1, r24
    1566:	4c f5       	brge	.+82     	; 0x15ba <LCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1568:	69 8d       	ldd	r22, Y+25	; 0x19
    156a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    156c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e2       	ldi	r20, 0x20	; 32
    1576:	51 e4       	ldi	r21, 0x41	; 65
    1578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157c:	dc 01       	movw	r26, r24
    157e:	cb 01       	movw	r24, r22
    1580:	bc 01       	movw	r22, r24
    1582:	cd 01       	movw	r24, r26
    1584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	9c 8b       	std	Y+20, r25	; 0x14
    158e:	8b 8b       	std	Y+19, r24	; 0x13
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <LCD_VidSendData+0xee>
    1592:	80 e9       	ldi	r24, 0x90	; 144
    1594:	91 e0       	ldi	r25, 0x01	; 1
    1596:	9a 8b       	std	Y+18, r25	; 0x12
    1598:	89 8b       	std	Y+17, r24	; 0x11
    159a:	89 89       	ldd	r24, Y+17	; 0x11
    159c:	9a 89       	ldd	r25, Y+18	; 0x12
    159e:	01 97       	sbiw	r24, 0x01	; 1
    15a0:	f1 f7       	brne	.-4      	; 0x159e <LCD_VidSendData+0xdc>
    15a2:	9a 8b       	std	Y+18, r25	; 0x12
    15a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a6:	8b 89       	ldd	r24, Y+19	; 0x13
    15a8:	9c 89       	ldd	r25, Y+20	; 0x14
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	9c 8b       	std	Y+20, r25	; 0x14
    15ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b0:	8b 89       	ldd	r24, Y+19	; 0x13
    15b2:	9c 89       	ldd	r25, Y+20	; 0x14
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f7       	brne	.-38     	; 0x1592 <LCD_VidSendData+0xd0>
    15b8:	14 c0       	rjmp	.+40     	; 0x15e2 <LCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ba:	6d 89       	ldd	r22, Y+21	; 0x15
    15bc:	7e 89       	ldd	r23, Y+22	; 0x16
    15be:	8f 89       	ldd	r24, Y+23	; 0x17
    15c0:	98 8d       	ldd	r25, Y+24	; 0x18
    15c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	9c 8b       	std	Y+20, r25	; 0x14
    15cc:	8b 8b       	std	Y+19, r24	; 0x13
    15ce:	8b 89       	ldd	r24, Y+19	; 0x13
    15d0:	9c 89       	ldd	r25, Y+20	; 0x14
    15d2:	98 8b       	std	Y+16, r25	; 0x10
    15d4:	8f 87       	std	Y+15, r24	; 0x0f
    15d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15d8:	98 89       	ldd	r25, Y+16	; 0x10
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <LCD_VidSendData+0x118>
    15de:	98 8b       	std	Y+16, r25	; 0x10
    15e0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	//E LOW  -->  UNENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);
    15e2:	82 e0       	ldi	r24, 0x02	; 2
    15e4:	62 e0       	ldi	r22, 0x02	; 2
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>

	                //--------------------------//

	/* SEND 4 LSBs */
	DIO_VidSetLSB(LCD_DATA_PORT,Copy_u8Data);
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	6d 8d       	ldd	r22, Y+29	; 0x1d
    15f0:	0e 94 1f 08 	call	0x103e	; 0x103e <DIO_VidSetLSB>

	//E HIGH  -->  ENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_High);
    15f4:	82 e0       	ldi	r24, 0x02	; 2
    15f6:	62 e0       	ldi	r22, 0x02	; 2
    15f8:	41 e0       	ldi	r20, 0x01	; 1
    15fa:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	a0 e0       	ldi	r26, 0x00	; 0
    1604:	b0 e4       	ldi	r27, 0x40	; 64
    1606:	8b 87       	std	Y+11, r24	; 0x0b
    1608:	9c 87       	std	Y+12, r25	; 0x0c
    160a:	ad 87       	std	Y+13, r26	; 0x0d
    160c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1610:	7c 85       	ldd	r23, Y+12	; 0x0c
    1612:	8d 85       	ldd	r24, Y+13	; 0x0d
    1614:	9e 85       	ldd	r25, Y+14	; 0x0e
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	4a e7       	ldi	r20, 0x7A	; 122
    161c:	55 e4       	ldi	r21, 0x45	; 69
    161e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1622:	dc 01       	movw	r26, r24
    1624:	cb 01       	movw	r24, r22
    1626:	8f 83       	std	Y+7, r24	; 0x07
    1628:	98 87       	std	Y+8, r25	; 0x08
    162a:	a9 87       	std	Y+9, r26	; 0x09
    162c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    162e:	6f 81       	ldd	r22, Y+7	; 0x07
    1630:	78 85       	ldd	r23, Y+8	; 0x08
    1632:	89 85       	ldd	r24, Y+9	; 0x09
    1634:	9a 85       	ldd	r25, Y+10	; 0x0a
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	5f e3       	ldi	r21, 0x3F	; 63
    163e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1642:	88 23       	and	r24, r24
    1644:	2c f4       	brge	.+10     	; 0x1650 <LCD_VidSendData+0x18e>
		__ticks = 1;
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	9e 83       	std	Y+6, r25	; 0x06
    164c:	8d 83       	std	Y+5, r24	; 0x05
    164e:	3f c0       	rjmp	.+126    	; 0x16ce <LCD_VidSendData+0x20c>
	else if (__tmp > 65535)
    1650:	6f 81       	ldd	r22, Y+7	; 0x07
    1652:	78 85       	ldd	r23, Y+8	; 0x08
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	3f ef       	ldi	r19, 0xFF	; 255
    165c:	4f e7       	ldi	r20, 0x7F	; 127
    165e:	57 e4       	ldi	r21, 0x47	; 71
    1660:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1664:	18 16       	cp	r1, r24
    1666:	4c f5       	brge	.+82     	; 0x16ba <LCD_VidSendData+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1668:	6b 85       	ldd	r22, Y+11	; 0x0b
    166a:	7c 85       	ldd	r23, Y+12	; 0x0c
    166c:	8d 85       	ldd	r24, Y+13	; 0x0d
    166e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1670:	20 e0       	ldi	r18, 0x00	; 0
    1672:	30 e0       	ldi	r19, 0x00	; 0
    1674:	40 e2       	ldi	r20, 0x20	; 32
    1676:	51 e4       	ldi	r21, 0x41	; 65
    1678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    167c:	dc 01       	movw	r26, r24
    167e:	cb 01       	movw	r24, r22
    1680:	bc 01       	movw	r22, r24
    1682:	cd 01       	movw	r24, r26
    1684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1688:	dc 01       	movw	r26, r24
    168a:	cb 01       	movw	r24, r22
    168c:	9e 83       	std	Y+6, r25	; 0x06
    168e:	8d 83       	std	Y+5, r24	; 0x05
    1690:	0f c0       	rjmp	.+30     	; 0x16b0 <LCD_VidSendData+0x1ee>
    1692:	80 e9       	ldi	r24, 0x90	; 144
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	f1 f7       	brne	.-4      	; 0x169e <LCD_VidSendData+0x1dc>
    16a2:	9c 83       	std	Y+4, r25	; 0x04
    16a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a6:	8d 81       	ldd	r24, Y+5	; 0x05
    16a8:	9e 81       	ldd	r25, Y+6	; 0x06
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	9e 83       	std	Y+6, r25	; 0x06
    16ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b0:	8d 81       	ldd	r24, Y+5	; 0x05
    16b2:	9e 81       	ldd	r25, Y+6	; 0x06
    16b4:	00 97       	sbiw	r24, 0x00	; 0
    16b6:	69 f7       	brne	.-38     	; 0x1692 <LCD_VidSendData+0x1d0>
    16b8:	14 c0       	rjmp	.+40     	; 0x16e2 <LCD_VidSendData+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ba:	6f 81       	ldd	r22, Y+7	; 0x07
    16bc:	78 85       	ldd	r23, Y+8	; 0x08
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	9a 83       	std	Y+2, r25	; 0x02
    16d4:	89 83       	std	Y+1, r24	; 0x01
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	9a 81       	ldd	r25, Y+2	; 0x02
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	f1 f7       	brne	.-4      	; 0x16da <LCD_VidSendData+0x218>
    16de:	9a 83       	std	Y+2, r25	; 0x02
    16e0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	//E LOW  -->  UNENABLE
	DIO_VidSetPinValue(LCD_CTRL_PORT,LCD_E_PIN,Pin_Low);
    16e2:	82 e0       	ldi	r24, 0x02	; 2
    16e4:	62 e0       	ldi	r22, 0x02	; 2
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	0e 94 16 06 	call	0xc2c	; 0xc2c <DIO_VidSetPinValue>

#endif

}
    16ec:	6d 96       	adiw	r28, 0x1d	; 29
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <LCD_VidInit>:


//INITIALIZATION FUNCTION
void LCD_VidInit(){
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	aa 97       	sbiw	r28, 0x2a	; 42
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
	LCD_VidSendCommand(LCD_CLEAR);

#elif LCD_MODE == 4

	//SET PIN RS DIRECTION TO BE OUTPUT
	DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_RW_PIN,Output);
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	41 e0       	ldi	r20, 0x01	; 1
    1718:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	//SET PIN RS DIRECTION TO BE OUTPUT
	DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_RS_PIN,Output);
    171c:	82 e0       	ldi	r24, 0x02	; 2
    171e:	60 e0       	ldi	r22, 0x00	; 0
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	//SET PIN E DIRECTION TO BE OUTPUT
	DIO_VidSetPinDirection(LCD_CTRL_PORT,LCD_E_PIN,Output);
    1726:	82 e0       	ldi	r24, 0x02	; 2
    1728:	62 e0       	ldi	r22, 0x02	; 2
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>

	//SET MSBs OF PORT A DIRECTION TO BE OUTPUT
	DIO_VidSetPinDirection(LCD_DATA_PORT,Pin4,Output);
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	64 e0       	ldi	r22, 0x04	; 4
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_DATA_PORT,Pin5,Output);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	65 e0       	ldi	r22, 0x05	; 5
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_DATA_PORT,Pin6,Output);
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	66 e0       	ldi	r22, 0x06	; 6
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
	DIO_VidSetPinDirection(LCD_DATA_PORT,Pin7,Output);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	67 e0       	ldi	r22, 0x07	; 7
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_VidSetPinDirection>
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 e2       	ldi	r26, 0x20	; 32
    175e:	b2 e4       	ldi	r27, 0x42	; 66
    1760:	8f a3       	std	Y+39, r24	; 0x27
    1762:	98 a7       	std	Y+40, r25	; 0x28
    1764:	a9 a7       	std	Y+41, r26	; 0x29
    1766:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	6f a1       	ldd	r22, Y+39	; 0x27
    176a:	78 a5       	ldd	r23, Y+40	; 0x28
    176c:	89 a5       	ldd	r24, Y+41	; 0x29
    176e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	4a e7       	ldi	r20, 0x7A	; 122
    1776:	55 e4       	ldi	r21, 0x45	; 69
    1778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	8b a3       	std	Y+35, r24	; 0x23
    1782:	9c a3       	std	Y+36, r25	; 0x24
    1784:	ad a3       	std	Y+37, r26	; 0x25
    1786:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1788:	6b a1       	ldd	r22, Y+35	; 0x23
    178a:	7c a1       	ldd	r23, Y+36	; 0x24
    178c:	8d a1       	ldd	r24, Y+37	; 0x25
    178e:	9e a1       	ldd	r25, Y+38	; 0x26
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	2c f4       	brge	.+10     	; 0x17aa <LCD_VidInit+0xac>
		__ticks = 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9a a3       	std	Y+34, r25	; 0x22
    17a6:	89 a3       	std	Y+33, r24	; 0x21
    17a8:	3f c0       	rjmp	.+126    	; 0x1828 <LCD_VidInit+0x12a>
	else if (__tmp > 65535)
    17aa:	6b a1       	ldd	r22, Y+35	; 0x23
    17ac:	7c a1       	ldd	r23, Y+36	; 0x24
    17ae:	8d a1       	ldd	r24, Y+37	; 0x25
    17b0:	9e a1       	ldd	r25, Y+38	; 0x26
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	57 e4       	ldi	r21, 0x47	; 71
    17ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17be:	18 16       	cp	r1, r24
    17c0:	4c f5       	brge	.+82     	; 0x1814 <LCD_VidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c2:	6f a1       	ldd	r22, Y+39	; 0x27
    17c4:	78 a5       	ldd	r23, Y+40	; 0x28
    17c6:	89 a5       	ldd	r24, Y+41	; 0x29
    17c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e2       	ldi	r20, 0x20	; 32
    17d0:	51 e4       	ldi	r21, 0x41	; 65
    17d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9a a3       	std	Y+34, r25	; 0x22
    17e8:	89 a3       	std	Y+33, r24	; 0x21
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <LCD_VidInit+0x10c>
    17ec:	80 e9       	ldi	r24, 0x90	; 144
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	98 a3       	std	Y+32, r25	; 0x20
    17f2:	8f 8f       	std	Y+31, r24	; 0x1f
    17f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17f6:	98 a1       	ldd	r25, Y+32	; 0x20
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_VidInit+0xfa>
    17fc:	98 a3       	std	Y+32, r25	; 0x20
    17fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1800:	89 a1       	ldd	r24, Y+33	; 0x21
    1802:	9a a1       	ldd	r25, Y+34	; 0x22
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	9a a3       	std	Y+34, r25	; 0x22
    1808:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180a:	89 a1       	ldd	r24, Y+33	; 0x21
    180c:	9a a1       	ldd	r25, Y+34	; 0x22
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	69 f7       	brne	.-38     	; 0x17ec <LCD_VidInit+0xee>
    1812:	14 c0       	rjmp	.+40     	; 0x183c <LCD_VidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1814:	6b a1       	ldd	r22, Y+35	; 0x23
    1816:	7c a1       	ldd	r23, Y+36	; 0x24
    1818:	8d a1       	ldd	r24, Y+37	; 0x25
    181a:	9e a1       	ldd	r25, Y+38	; 0x26
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	9a a3       	std	Y+34, r25	; 0x22
    1826:	89 a3       	std	Y+33, r24	; 0x21
    1828:	89 a1       	ldd	r24, Y+33	; 0x21
    182a:	9a a1       	ldd	r25, Y+34	; 0x22
    182c:	9e 8f       	std	Y+30, r25	; 0x1e
    182e:	8d 8f       	std	Y+29, r24	; 0x1d
    1830:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1832:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_VidInit+0x136>
    1838:	9e 8f       	std	Y+30, r25	; 0x1e
    183a:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(40);

	//FUNCTION SET COMMAND: 4bot mode
	LCD_VidSendCommand(0x02);
    183c:	82 e0       	ldi	r24, 0x02	; 2
    183e:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>

	//FUNCTION SET COMMAND: 4bit mode 2 LINES, 5*8 FONT SIZE
	LCD_VidSendCommand(0x28);
    1842:	88 e2       	ldi	r24, 0x28	; 40
    1844:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a0 e2       	ldi	r26, 0x20	; 32
    184e:	b2 e4       	ldi	r27, 0x42	; 66
    1850:	89 8f       	std	Y+25, r24	; 0x19
    1852:	9a 8f       	std	Y+26, r25	; 0x1a
    1854:	ab 8f       	std	Y+27, r26	; 0x1b
    1856:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1858:	69 8d       	ldd	r22, Y+25	; 0x19
    185a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    185c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    185e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	4a e7       	ldi	r20, 0x7A	; 122
    1866:	55 e4       	ldi	r21, 0x45	; 69
    1868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	8d 8b       	std	Y+21, r24	; 0x15
    1872:	9e 8b       	std	Y+22, r25	; 0x16
    1874:	af 8b       	std	Y+23, r26	; 0x17
    1876:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1878:	6d 89       	ldd	r22, Y+21	; 0x15
    187a:	7e 89       	ldd	r23, Y+22	; 0x16
    187c:	8f 89       	ldd	r24, Y+23	; 0x17
    187e:	98 8d       	ldd	r25, Y+24	; 0x18
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	40 e8       	ldi	r20, 0x80	; 128
    1886:	5f e3       	ldi	r21, 0x3F	; 63
    1888:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    188c:	88 23       	and	r24, r24
    188e:	2c f4       	brge	.+10     	; 0x189a <LCD_VidInit+0x19c>
		__ticks = 1;
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	9c 8b       	std	Y+20, r25	; 0x14
    1896:	8b 8b       	std	Y+19, r24	; 0x13
    1898:	3f c0       	rjmp	.+126    	; 0x1918 <LCD_VidInit+0x21a>
	else if (__tmp > 65535)
    189a:	6d 89       	ldd	r22, Y+21	; 0x15
    189c:	7e 89       	ldd	r23, Y+22	; 0x16
    189e:	8f 89       	ldd	r24, Y+23	; 0x17
    18a0:	98 8d       	ldd	r25, Y+24	; 0x18
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	3f ef       	ldi	r19, 0xFF	; 255
    18a6:	4f e7       	ldi	r20, 0x7F	; 127
    18a8:	57 e4       	ldi	r21, 0x47	; 71
    18aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ae:	18 16       	cp	r1, r24
    18b0:	4c f5       	brge	.+82     	; 0x1904 <LCD_VidInit+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b2:	69 8d       	ldd	r22, Y+25	; 0x19
    18b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e2       	ldi	r20, 0x20	; 32
    18c0:	51 e4       	ldi	r21, 0x41	; 65
    18c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	bc 01       	movw	r22, r24
    18cc:	cd 01       	movw	r24, r26
    18ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	9c 8b       	std	Y+20, r25	; 0x14
    18d8:	8b 8b       	std	Y+19, r24	; 0x13
    18da:	0f c0       	rjmp	.+30     	; 0x18fa <LCD_VidInit+0x1fc>
    18dc:	80 e9       	ldi	r24, 0x90	; 144
    18de:	91 e0       	ldi	r25, 0x01	; 1
    18e0:	9a 8b       	std	Y+18, r25	; 0x12
    18e2:	89 8b       	std	Y+17, r24	; 0x11
    18e4:	89 89       	ldd	r24, Y+17	; 0x11
    18e6:	9a 89       	ldd	r25, Y+18	; 0x12
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	f1 f7       	brne	.-4      	; 0x18e8 <LCD_VidInit+0x1ea>
    18ec:	9a 8b       	std	Y+18, r25	; 0x12
    18ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	8b 89       	ldd	r24, Y+19	; 0x13
    18f2:	9c 89       	ldd	r25, Y+20	; 0x14
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	9c 8b       	std	Y+20, r25	; 0x14
    18f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18fa:	8b 89       	ldd	r24, Y+19	; 0x13
    18fc:	9c 89       	ldd	r25, Y+20	; 0x14
    18fe:	00 97       	sbiw	r24, 0x00	; 0
    1900:	69 f7       	brne	.-38     	; 0x18dc <LCD_VidInit+0x1de>
    1902:	14 c0       	rjmp	.+40     	; 0x192c <LCD_VidInit+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1904:	6d 89       	ldd	r22, Y+21	; 0x15
    1906:	7e 89       	ldd	r23, Y+22	; 0x16
    1908:	8f 89       	ldd	r24, Y+23	; 0x17
    190a:	98 8d       	ldd	r25, Y+24	; 0x18
    190c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	9c 8b       	std	Y+20, r25	; 0x14
    1916:	8b 8b       	std	Y+19, r24	; 0x13
    1918:	8b 89       	ldd	r24, Y+19	; 0x13
    191a:	9c 89       	ldd	r25, Y+20	; 0x14
    191c:	98 8b       	std	Y+16, r25	; 0x10
    191e:	8f 87       	std	Y+15, r24	; 0x0f
    1920:	8f 85       	ldd	r24, Y+15	; 0x0f
    1922:	98 89       	ldd	r25, Y+16	; 0x10
    1924:	01 97       	sbiw	r24, 0x01	; 1
    1926:	f1 f7       	brne	.-4      	; 0x1924 <LCD_VidInit+0x226>
    1928:	98 8b       	std	Y+16, r25	; 0x10
    192a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(40);
	//DISPLAY ON OFF CONTROL: DISPLAY ENABLE, DISPLAY CURSOR, ON BLINK CURSOR
	LCD_VidSendCommand(0x0D);
    192c:	8d e0       	ldi	r24, 0x0D	; 13
    192e:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	a0 e2       	ldi	r26, 0x20	; 32
    1938:	b2 e4       	ldi	r27, 0x42	; 66
    193a:	8b 87       	std	Y+11, r24	; 0x0b
    193c:	9c 87       	std	Y+12, r25	; 0x0c
    193e:	ad 87       	std	Y+13, r26	; 0x0d
    1940:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1942:	6b 85       	ldd	r22, Y+11	; 0x0b
    1944:	7c 85       	ldd	r23, Y+12	; 0x0c
    1946:	8d 85       	ldd	r24, Y+13	; 0x0d
    1948:	9e 85       	ldd	r25, Y+14	; 0x0e
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	4a e7       	ldi	r20, 0x7A	; 122
    1950:	55 e4       	ldi	r21, 0x45	; 69
    1952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	8f 83       	std	Y+7, r24	; 0x07
    195c:	98 87       	std	Y+8, r25	; 0x08
    195e:	a9 87       	std	Y+9, r26	; 0x09
    1960:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1962:	6f 81       	ldd	r22, Y+7	; 0x07
    1964:	78 85       	ldd	r23, Y+8	; 0x08
    1966:	89 85       	ldd	r24, Y+9	; 0x09
    1968:	9a 85       	ldd	r25, Y+10	; 0x0a
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e8       	ldi	r20, 0x80	; 128
    1970:	5f e3       	ldi	r21, 0x3F	; 63
    1972:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1976:	88 23       	and	r24, r24
    1978:	2c f4       	brge	.+10     	; 0x1984 <LCD_VidInit+0x286>
		__ticks = 1;
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
    1982:	3f c0       	rjmp	.+126    	; 0x1a02 <LCD_VidInit+0x304>
	else if (__tmp > 65535)
    1984:	6f 81       	ldd	r22, Y+7	; 0x07
    1986:	78 85       	ldd	r23, Y+8	; 0x08
    1988:	89 85       	ldd	r24, Y+9	; 0x09
    198a:	9a 85       	ldd	r25, Y+10	; 0x0a
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	3f ef       	ldi	r19, 0xFF	; 255
    1990:	4f e7       	ldi	r20, 0x7F	; 127
    1992:	57 e4       	ldi	r21, 0x47	; 71
    1994:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1998:	18 16       	cp	r1, r24
    199a:	4c f5       	brge	.+82     	; 0x19ee <LCD_VidInit+0x2f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    199c:	6b 85       	ldd	r22, Y+11	; 0x0b
    199e:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	40 e2       	ldi	r20, 0x20	; 32
    19aa:	51 e4       	ldi	r21, 0x41	; 65
    19ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	9e 83       	std	Y+6, r25	; 0x06
    19c2:	8d 83       	std	Y+5, r24	; 0x05
    19c4:	0f c0       	rjmp	.+30     	; 0x19e4 <LCD_VidInit+0x2e6>
    19c6:	80 e9       	ldi	r24, 0x90	; 144
    19c8:	91 e0       	ldi	r25, 0x01	; 1
    19ca:	9c 83       	std	Y+4, r25	; 0x04
    19cc:	8b 83       	std	Y+3, r24	; 0x03
    19ce:	8b 81       	ldd	r24, Y+3	; 0x03
    19d0:	9c 81       	ldd	r25, Y+4	; 0x04
    19d2:	01 97       	sbiw	r24, 0x01	; 1
    19d4:	f1 f7       	brne	.-4      	; 0x19d2 <LCD_VidInit+0x2d4>
    19d6:	9c 83       	std	Y+4, r25	; 0x04
    19d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19da:	8d 81       	ldd	r24, Y+5	; 0x05
    19dc:	9e 81       	ldd	r25, Y+6	; 0x06
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	9e 83       	std	Y+6, r25	; 0x06
    19e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e4:	8d 81       	ldd	r24, Y+5	; 0x05
    19e6:	9e 81       	ldd	r25, Y+6	; 0x06
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <LCD_VidInit+0x2c8>
    19ec:	14 c0       	rjmp	.+40     	; 0x1a16 <LCD_VidInit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ee:	6f 81       	ldd	r22, Y+7	; 0x07
    19f0:	78 85       	ldd	r23, Y+8	; 0x08
    19f2:	89 85       	ldd	r24, Y+9	; 0x09
    19f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	9e 83       	std	Y+6, r25	; 0x06
    1a00:	8d 83       	std	Y+5, r24	; 0x05
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	9e 81       	ldd	r25, Y+6	; 0x06
    1a06:	9a 83       	std	Y+2, r25	; 0x02
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	f1 f7       	brne	.-4      	; 0x1a0e <LCD_VidInit+0x310>
    1a12:	9a 83       	std	Y+2, r25	; 0x02
    1a14:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(40);
	//CLEAR DISPLAY
	LCD_VidSendCommand(0x01);
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>

#endif
}
    1a1c:	aa 96       	adiw	r28, 0x2a	; 42
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <LCD_VidSendString>:

//SEND STRING FUNCTION
void LCD_VidSendString(char *Copy_u8Data){
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	00 d0       	rcall	.+0      	; 0x1a34 <LCD_VidSendString+0x6>
    1a34:	00 d0       	rcall	.+0      	; 0x1a36 <LCD_VidSendString+0x8>
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
	int Iterator = 0;
    1a3e:	1a 82       	std	Y+2, r1	; 0x02
    1a40:	19 82       	std	Y+1, r1	; 0x01
    1a42:	0f c0       	rjmp	.+30     	; 0x1a62 <LCD_VidSendString+0x34>
	while(Copy_u8Data[Iterator] != '\0'){
		LCD_VidSendData(Copy_u8Data[Iterator]);
    1a44:	29 81       	ldd	r18, Y+1	; 0x01
    1a46:	3a 81       	ldd	r19, Y+2	; 0x02
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	e2 0f       	add	r30, r18
    1a50:	f3 1f       	adc	r31, r19
    1a52:	80 81       	ld	r24, Z
    1a54:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
		Iterator++;
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	01 96       	adiw	r24, 0x01	; 1
    1a5e:	9a 83       	std	Y+2, r25	; 0x02
    1a60:	89 83       	std	Y+1, r24	; 0x01
}

//SEND STRING FUNCTION
void LCD_VidSendString(char *Copy_u8Data){
	int Iterator = 0;
	while(Copy_u8Data[Iterator] != '\0'){
    1a62:	29 81       	ldd	r18, Y+1	; 0x01
    1a64:	3a 81       	ldd	r19, Y+2	; 0x02
    1a66:	8b 81       	ldd	r24, Y+3	; 0x03
    1a68:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	e2 0f       	add	r30, r18
    1a6e:	f3 1f       	adc	r31, r19
    1a70:	80 81       	ld	r24, Z
    1a72:	88 23       	and	r24, r24
    1a74:	39 f7       	brne	.-50     	; 0x1a44 <LCD_VidSendString+0x16>
		LCD_VidSendData(Copy_u8Data[Iterator]);
		Iterator++;
	}
}
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <LCD_VidSetPosition>:

//SET POSITION FUNCTION
void LCD_VidSetPosition(u8 Copy_u8Row, u8 Copy_u8Columm){
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <LCD_VidSetPosition+0x6>
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	89 83       	std	Y+1, r24	; 0x01
    1a90:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row == LCD_ROW1){
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	88 23       	and	r24, r24
    1a96:	61 f4       	brne	.+24     	; 0x1ab0 <LCD_VidSetPosition+0x2c>
		LOC = Copy_u8Columm;
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	88 2f       	mov	r24, r24
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	90 93 85 00 	sts	0x0085, r25
    1aa2:	80 93 84 00 	sts	0x0084, r24
		LCD_VidSendCommand(0x80+Copy_u8Columm);
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	80 58       	subi	r24, 0x80	; 128
    1aaa:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
    1aae:	0f c0       	rjmp	.+30     	; 0x1ace <LCD_VidSetPosition+0x4a>
	}
	else if(Copy_u8Row == LCD_ROW2){
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	61 f4       	brne	.+24     	; 0x1ace <LCD_VidSetPosition+0x4a>
		LOC = 16+Copy_u8Columm;
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	88 2f       	mov	r24, r24
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	40 96       	adiw	r24, 0x10	; 16
    1abe:	90 93 85 00 	sts	0x0085, r25
    1ac2:	80 93 84 00 	sts	0x0084, r24
		LCD_VidSendCommand(0x80+0x40+Copy_u8Columm);
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	80 54       	subi	r24, 0x40	; 64
    1aca:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
	}
}
    1ace:	0f 90       	pop	r0
    1ad0:	0f 90       	pop	r0
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

00001ad8 <LCD_VidSendNumber>:

//SEND NUMBER FUNCTION
void LCD_VidSendNumber(int Copy_u8Data){
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
    1ae0:	62 97       	sbiw	r28, 0x12	; 18
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	9a 8b       	std	Y+18, r25	; 0x12
    1aee:	89 8b       	std	Y+17, r24	; 0x11
	char str[16];
	sprintf(str,"%d",Copy_u8Data);
    1af0:	00 d0       	rcall	.+0      	; 0x1af2 <LCD_VidSendNumber+0x1a>
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <LCD_VidSendNumber+0x1c>
    1af4:	00 d0       	rcall	.+0      	; 0x1af6 <LCD_VidSendNumber+0x1e>
    1af6:	ed b7       	in	r30, 0x3d	; 61
    1af8:	fe b7       	in	r31, 0x3e	; 62
    1afa:	31 96       	adiw	r30, 0x01	; 1
    1afc:	ce 01       	movw	r24, r28
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	80 83       	st	Z, r24
    1b04:	80 e6       	ldi	r24, 0x60	; 96
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	93 83       	std	Z+3, r25	; 0x03
    1b0a:	82 83       	std	Z+2, r24	; 0x02
    1b0c:	89 89       	ldd	r24, Y+17	; 0x11
    1b0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1b10:	95 83       	std	Z+5, r25	; 0x05
    1b12:	84 83       	std	Z+4, r24	; 0x04
    1b14:	0e 94 be 12 	call	0x257c	; 0x257c <sprintf>
    1b18:	8d b7       	in	r24, 0x3d	; 61
    1b1a:	9e b7       	in	r25, 0x3e	; 62
    1b1c:	06 96       	adiw	r24, 0x06	; 6
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	9e bf       	out	0x3e, r25	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	8d bf       	out	0x3d, r24	; 61
	LCD_VidSendString(str);
    1b28:	ce 01       	movw	r24, r28
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LCD_VidSendString>
}
    1b30:	62 96       	adiw	r28, 0x12	; 18
    1b32:	0f b6       	in	r0, 0x3f	; 63
    1b34:	f8 94       	cli
    1b36:	de bf       	out	0x3e, r29	; 62
    1b38:	0f be       	out	0x3f, r0	; 63
    1b3a:	cd bf       	out	0x3d, r28	; 61
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <LCD_VidClear>:

void LCD_VidClear()
{
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b4c:	0f b6       	in	r0, 0x3f	; 63
    1b4e:	f8 94       	cli
    1b50:	de bf       	out	0x3e, r29	; 62
    1b52:	0f be       	out	0x3f, r0	; 63
    1b54:	cd bf       	out	0x3d, r28	; 61
	LCD_VidSendCommand(LCD_CLEAR);		/* Clear display */
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a0 e0       	ldi	r26, 0x00	; 0
    1b62:	b0 e4       	ldi	r27, 0x40	; 64
    1b64:	8b 87       	std	Y+11, r24	; 0x0b
    1b66:	9c 87       	std	Y+12, r25	; 0x0c
    1b68:	ad 87       	std	Y+13, r26	; 0x0d
    1b6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	4a e7       	ldi	r20, 0x7A	; 122
    1b7a:	55 e4       	ldi	r21, 0x45	; 69
    1b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b80:	dc 01       	movw	r26, r24
    1b82:	cb 01       	movw	r24, r22
    1b84:	8f 83       	std	Y+7, r24	; 0x07
    1b86:	98 87       	std	Y+8, r25	; 0x08
    1b88:	a9 87       	std	Y+9, r26	; 0x09
    1b8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	78 85       	ldd	r23, Y+8	; 0x08
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e8       	ldi	r20, 0x80	; 128
    1b9a:	5f e3       	ldi	r21, 0x3F	; 63
    1b9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba0:	88 23       	and	r24, r24
    1ba2:	2c f4       	brge	.+10     	; 0x1bae <LCD_VidClear+0x6c>
		__ticks = 1;
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	9e 83       	std	Y+6, r25	; 0x06
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	3f c0       	rjmp	.+126    	; 0x1c2c <LCD_VidClear+0xea>
	else if (__tmp > 65535)
    1bae:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb0:	78 85       	ldd	r23, Y+8	; 0x08
    1bb2:	89 85       	ldd	r24, Y+9	; 0x09
    1bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	3f ef       	ldi	r19, 0xFF	; 255
    1bba:	4f e7       	ldi	r20, 0x7F	; 127
    1bbc:	57 e4       	ldi	r21, 0x47	; 71
    1bbe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bc2:	18 16       	cp	r1, r24
    1bc4:	4c f5       	brge	.+82     	; 0x1c18 <LCD_VidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e2       	ldi	r20, 0x20	; 32
    1bd4:	51 e4       	ldi	r21, 0x41	; 65
    1bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bda:	dc 01       	movw	r26, r24
    1bdc:	cb 01       	movw	r24, r22
    1bde:	bc 01       	movw	r22, r24
    1be0:	cd 01       	movw	r24, r26
    1be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	0f c0       	rjmp	.+30     	; 0x1c0e <LCD_VidClear+0xcc>
    1bf0:	80 e9       	ldi	r24, 0x90	; 144
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	9c 83       	std	Y+4, r25	; 0x04
    1bf6:	8b 83       	std	Y+3, r24	; 0x03
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	f1 f7       	brne	.-4      	; 0x1bfc <LCD_VidClear+0xba>
    1c00:	9c 83       	std	Y+4, r25	; 0x04
    1c02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c04:	8d 81       	ldd	r24, Y+5	; 0x05
    1c06:	9e 81       	ldd	r25, Y+6	; 0x06
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	00 97       	sbiw	r24, 0x00	; 0
    1c14:	69 f7       	brne	.-38     	; 0x1bf0 <LCD_VidClear+0xae>
    1c16:	14 c0       	rjmp	.+40     	; 0x1c40 <LCD_VidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c18:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1a:	78 85       	ldd	r23, Y+8	; 0x08
    1c1c:	89 85       	ldd	r24, Y+9	; 0x09
    1c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	9a 83       	std	Y+2, r25	; 0x02
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	9a 81       	ldd	r25, Y+2	; 0x02
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	f1 f7       	brne	.-4      	; 0x1c38 <LCD_VidClear+0xf6>
    1c3c:	9a 83       	std	Y+2, r25	; 0x02
    1c3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_VidSendCommand(LCD_FORCE_START_LOCATION);		/* Cursor at home position */
    1c40:	80 e8       	ldi	r24, 0x80	; 128
    1c42:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
}
    1c46:	2e 96       	adiw	r28, 0x0e	; 14
    1c48:	0f b6       	in	r0, 0x3f	; 63
    1c4a:	f8 94       	cli
    1c4c:	de bf       	out	0x3e, r29	; 62
    1c4e:	0f be       	out	0x3f, r0	; 63
    1c50:	cd bf       	out	0x3d, r28	; 61
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <main>:
#include <stdlib.h>
#include <string.h>


int main()
{
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	cc 56       	subi	r28, 0x6C	; 108
    1c66:	d0 40       	sbci	r29, 0x00	; 0
    1c68:	0f b6       	in	r0, 0x3f	; 63
    1c6a:	f8 94       	cli
    1c6c:	de bf       	out	0x3e, r29	; 62
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	cd bf       	out	0x3d, r28	; 61
	LCD_VidInit();
    1c72:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <LCD_VidInit>
	KPD_VidInit();
    1c76:	0e 94 10 09 	call	0x1220	; 0x1220 <KPD_VidInit>
	 int value;
	 char valprev[20];
	 u8 op;
	 int result;
	 while (1){
	    value = KPD_VidGetPressedKey();
    1c7a:	0e 94 98 08 	call	0x1130	; 0x1130 <KPD_VidGetPressedKey>
    1c7e:	fe 01       	movw	r30, r28
    1c80:	ea 5a       	subi	r30, 0xAA	; 170
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	88 2f       	mov	r24, r24
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	91 83       	std	Z+1, r25	; 0x01
    1c8a:	80 83       	st	Z, r24
    1c8c:	09 c0       	rjmp	.+18     	; 0x1ca0 <main+0x48>
	    while (value == 0xFF){
	      value = KPD_VidGetPressedKey();
    1c8e:	0e 94 98 08 	call	0x1130	; 0x1130 <KPD_VidGetPressedKey>
    1c92:	fe 01       	movw	r30, r28
    1c94:	ea 5a       	subi	r30, 0xAA	; 170
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	88 2f       	mov	r24, r24
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
	 char valprev[20];
	 u8 op;
	 int result;
	 while (1){
	    value = KPD_VidGetPressedKey();
	    while (value == 0xFF){
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ea 5a       	subi	r30, 0xAA	; 170
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 81       	ld	r24, Z
    1ca8:	91 81       	ldd	r25, Z+1	; 0x01
    1caa:	8f 3f       	cpi	r24, 0xFF	; 255
    1cac:	91 05       	cpc	r25, r1
    1cae:	79 f3       	breq	.-34     	; 0x1c8e <main+0x36>
	      value = KPD_VidGetPressedKey();
	    }

	    if(value == '+' || value == '-' || value == '*' || value == '/' || value == '%'){
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	ea 5a       	subi	r30, 0xAA	; 170
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	8b 32       	cpi	r24, 0x2B	; 43
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	01 f1       	breq	.+64     	; 0x1d00 <main+0xa8>
    1cc0:	fe 01       	movw	r30, r28
    1cc2:	ea 5a       	subi	r30, 0xAA	; 170
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	80 81       	ld	r24, Z
    1cc8:	91 81       	ldd	r25, Z+1	; 0x01
    1cca:	8d 32       	cpi	r24, 0x2D	; 45
    1ccc:	91 05       	cpc	r25, r1
    1cce:	c1 f0       	breq	.+48     	; 0x1d00 <main+0xa8>
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	ea 5a       	subi	r30, 0xAA	; 170
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	80 81       	ld	r24, Z
    1cd8:	91 81       	ldd	r25, Z+1	; 0x01
    1cda:	8a 32       	cpi	r24, 0x2A	; 42
    1cdc:	91 05       	cpc	r25, r1
    1cde:	81 f0       	breq	.+32     	; 0x1d00 <main+0xa8>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	ea 5a       	subi	r30, 0xAA	; 170
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	8f 32       	cpi	r24, 0x2F	; 47
    1cec:	91 05       	cpc	r25, r1
    1cee:	41 f0       	breq	.+16     	; 0x1d00 <main+0xa8>
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	ea 5a       	subi	r30, 0xAA	; 170
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	80 81       	ld	r24, Z
    1cf8:	91 81       	ldd	r25, Z+1	; 0x01
    1cfa:	85 32       	cpi	r24, 0x25	; 37
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	49 f5       	brne	.+82     	; 0x1d52 <main+0xfa>
	      result = atoi(valprev);
    1d00:	ce 01       	movw	r24, r28
    1d02:	88 5a       	subi	r24, 0xA8	; 168
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	0e 94 7f 12 	call	0x24fe	; 0x24fe <atoi>
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ed 5a       	subi	r30, 0xAD	; 173
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	80 83       	st	Z, r24
	      strcpy(valprev,"");
    1d14:	ce 01       	movw	r24, r28
    1d16:	88 5a       	subi	r24, 0xA8	; 168
    1d18:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1a:	23 e6       	ldi	r18, 0x63	; 99
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	b9 01       	movw	r22, r18
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	0e 94 9d 12 	call	0x253a	; 0x253a <memcpy>
	      LCD_VidSendData(' ');
    1d28:	80 e2       	ldi	r24, 0x20	; 32
    1d2a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	      LCD_VidSendData(value);
    1d2e:	fe 01       	movw	r30, r28
    1d30:	ea 5a       	subi	r30, 0xAA	; 170
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	80 81       	ld	r24, Z
    1d36:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	      LCD_VidSendData(' ');
    1d3a:	80 e2       	ldi	r24, 0x20	; 32
    1d3c:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	      op = value;
    1d40:	de 01       	movw	r26, r28
    1d42:	ab 5a       	subi	r26, 0xAB	; 171
    1d44:	bf 4f       	sbci	r27, 0xFF	; 255
    1d46:	fe 01       	movw	r30, r28
    1d48:	ea 5a       	subi	r30, 0xAA	; 170
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	80 81       	ld	r24, Z
    1d4e:	8c 93       	st	X, r24
    1d50:	94 cf       	rjmp	.-216    	; 0x1c7a <main+0x22>
	    }else{
	    	if(value == '='){
    1d52:	fe 01       	movw	r30, r28
    1d54:	ea 5a       	subi	r30, 0xAA	; 170
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
    1d5c:	8d 33       	cpi	r24, 0x3D	; 61
    1d5e:	91 05       	cpc	r25, r1
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <main+0x10c>
    1d62:	53 c3       	rjmp	.+1702   	; 0x240a <main+0x7b2>
	    		int var = atoi(valprev);
    1d64:	ce 01       	movw	r24, r28
    1d66:	88 5a       	subi	r24, 0xA8	; 168
    1d68:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <atoi>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	ef 5a       	subi	r30, 0xAF	; 175
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	80 83       	st	Z, r24
	    		if(op == '+'){
    1d78:	fe 01       	movw	r30, r28
    1d7a:	eb 5a       	subi	r30, 0xAB	; 171
    1d7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d7e:	80 81       	ld	r24, Z
    1d80:	8b 32       	cpi	r24, 0x2B	; 43
    1d82:	09 f0       	breq	.+2      	; 0x1d86 <main+0x12e>
    1d84:	aa c0       	rjmp	.+340    	; 0x1eda <main+0x282>
	    			LCD_VidSendData(' ');
    1d86:	80 e2       	ldi	r24, 0x20	; 32
    1d88:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData('=');
    1d8c:	8d e3       	ldi	r24, 0x3D	; 61
    1d8e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData(' ');
    1d92:	80 e2       	ldi	r24, 0x20	; 32
    1d94:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			int x = result + var;
    1d98:	ae 01       	movw	r20, r28
    1d9a:	41 5b       	subi	r20, 0xB1	; 177
    1d9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d9e:	fe 01       	movw	r30, r28
    1da0:	ed 5a       	subi	r30, 0xAD	; 173
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	de 01       	movw	r26, r28
    1da6:	af 5a       	subi	r26, 0xAF	; 175
    1da8:	bf 4f       	sbci	r27, 0xFF	; 255
    1daa:	20 81       	ld	r18, Z
    1dac:	31 81       	ldd	r19, Z+1	; 0x01
    1dae:	8d 91       	ld	r24, X+
    1db0:	9c 91       	ld	r25, X
    1db2:	82 0f       	add	r24, r18
    1db4:	93 1f       	adc	r25, r19
    1db6:	fa 01       	movw	r30, r20
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
	    			LCD_VidSendNumber(x);
    1dbc:	fe 01       	movw	r30, r28
    1dbe:	e1 5b       	subi	r30, 0xB1	; 177
    1dc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc2:	80 81       	ld	r24, Z
    1dc4:	91 81       	ldd	r25, Z+1	; 0x01
    1dc6:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <LCD_VidSendNumber>
    1dca:	fe 01       	movw	r30, r28
    1dcc:	ed 5b       	subi	r30, 0xBD	; 189
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	aa ef       	ldi	r26, 0xFA	; 250
    1dd6:	b3 e4       	ldi	r27, 0x43	; 67
    1dd8:	80 83       	st	Z, r24
    1dda:	91 83       	std	Z+1, r25	; 0x01
    1ddc:	a2 83       	std	Z+2, r26	; 0x02
    1dde:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de0:	8e 01       	movw	r16, r28
    1de2:	01 5c       	subi	r16, 0xC1	; 193
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	fe 01       	movw	r30, r28
    1de8:	ed 5b       	subi	r30, 0xBD	; 189
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	4a e7       	ldi	r20, 0x7A	; 122
    1dfa:	55 e4       	ldi	r21, 0x45	; 69
    1dfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	f8 01       	movw	r30, r16
    1e06:	80 83       	st	Z, r24
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	a2 83       	std	Z+2, r26	; 0x02
    1e0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e0e:	fe 01       	movw	r30, r28
    1e10:	ff 96       	adiw	r30, 0x3f	; 63
    1e12:	60 81       	ld	r22, Z
    1e14:	71 81       	ldd	r23, Z+1	; 0x01
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e8       	ldi	r20, 0x80	; 128
    1e20:	5f e3       	ldi	r21, 0x3F	; 63
    1e22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e26:	88 23       	and	r24, r24
    1e28:	2c f4       	brge	.+10     	; 0x1e34 <main+0x1dc>
		__ticks = 1;
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	9e af       	std	Y+62, r25	; 0x3e
    1e30:	8d af       	std	Y+61, r24	; 0x3d
    1e32:	46 c0       	rjmp	.+140    	; 0x1ec0 <main+0x268>
	else if (__tmp > 65535)
    1e34:	fe 01       	movw	r30, r28
    1e36:	ff 96       	adiw	r30, 0x3f	; 63
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	20 e0       	ldi	r18, 0x00	; 0
    1e42:	3f ef       	ldi	r19, 0xFF	; 255
    1e44:	4f e7       	ldi	r20, 0x7F	; 127
    1e46:	57 e4       	ldi	r21, 0x47	; 71
    1e48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e4c:	18 16       	cp	r1, r24
    1e4e:	64 f5       	brge	.+88     	; 0x1ea8 <main+0x250>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e50:	fe 01       	movw	r30, r28
    1e52:	ed 5b       	subi	r30, 0xBD	; 189
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	60 81       	ld	r22, Z
    1e58:	71 81       	ldd	r23, Z+1	; 0x01
    1e5a:	82 81       	ldd	r24, Z+2	; 0x02
    1e5c:	93 81       	ldd	r25, Z+3	; 0x03
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e2       	ldi	r20, 0x20	; 32
    1e64:	51 e4       	ldi	r21, 0x41	; 65
    1e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9e af       	std	Y+62, r25	; 0x3e
    1e7c:	8d af       	std	Y+61, r24	; 0x3d
    1e7e:	0f c0       	rjmp	.+30     	; 0x1e9e <main+0x246>
    1e80:	80 e9       	ldi	r24, 0x90	; 144
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	9c af       	std	Y+60, r25	; 0x3c
    1e86:	8b af       	std	Y+59, r24	; 0x3b
    1e88:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e8a:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <main+0x234>
    1e90:	9c af       	std	Y+60, r25	; 0x3c
    1e92:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e94:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	9e af       	std	Y+62, r25	; 0x3e
    1e9c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ea0:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ea2:	00 97       	sbiw	r24, 0x00	; 0
    1ea4:	69 f7       	brne	.-38     	; 0x1e80 <main+0x228>
    1ea6:	16 c0       	rjmp	.+44     	; 0x1ed4 <main+0x27c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	ff 96       	adiw	r30, 0x3f	; 63
    1eac:	60 81       	ld	r22, Z
    1eae:	71 81       	ldd	r23, Z+1	; 0x01
    1eb0:	82 81       	ldd	r24, Z+2	; 0x02
    1eb2:	93 81       	ldd	r25, Z+3	; 0x03
    1eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	9e af       	std	Y+62, r25	; 0x3e
    1ebe:	8d af       	std	Y+61, r24	; 0x3d
    1ec0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ec2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ec4:	9a af       	std	Y+58, r25	; 0x3a
    1ec6:	89 af       	std	Y+57, r24	; 0x39
    1ec8:	89 ad       	ldd	r24, Y+57	; 0x39
    1eca:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	f1 f7       	brne	.-4      	; 0x1ecc <main+0x274>
    1ed0:	9a af       	std	Y+58, r25	; 0x3a
    1ed2:	89 af       	std	Y+57, r24	; 0x39
	    			_delay_ms(500);
	    			LCD_VidSendCommand(LCD_CLEAR);
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
	    		}
	    		if(op == '-'){
    1eda:	fe 01       	movw	r30, r28
    1edc:	eb 5a       	subi	r30, 0xAB	; 171
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	80 81       	ld	r24, Z
    1ee2:	8d 32       	cpi	r24, 0x2D	; 45
    1ee4:	09 f0       	breq	.+2      	; 0x1ee8 <main+0x290>
    1ee6:	99 c0       	rjmp	.+306    	; 0x201a <main+0x3c2>
	    			LCD_VidSendData(' ');
    1ee8:	80 e2       	ldi	r24, 0x20	; 32
    1eea:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData('=');
    1eee:	8d e3       	ldi	r24, 0x3D	; 61
    1ef0:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData(' ');
    1ef4:	80 e2       	ldi	r24, 0x20	; 32
    1ef6:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			int x = result - var;
    1efa:	ae 01       	movw	r20, r28
    1efc:	43 5b       	subi	r20, 0xB3	; 179
    1efe:	5f 4f       	sbci	r21, 0xFF	; 255
    1f00:	fe 01       	movw	r30, r28
    1f02:	ed 5a       	subi	r30, 0xAD	; 173
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	de 01       	movw	r26, r28
    1f08:	af 5a       	subi	r26, 0xAF	; 175
    1f0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f0c:	20 81       	ld	r18, Z
    1f0e:	31 81       	ldd	r19, Z+1	; 0x01
    1f10:	8d 91       	ld	r24, X+
    1f12:	9c 91       	ld	r25, X
    1f14:	b9 01       	movw	r22, r18
    1f16:	68 1b       	sub	r22, r24
    1f18:	79 0b       	sbc	r23, r25
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	fa 01       	movw	r30, r20
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
	    			LCD_VidSendNumber(x);
    1f22:	fe 01       	movw	r30, r28
    1f24:	e3 5b       	subi	r30, 0xB3	; 179
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	80 81       	ld	r24, Z
    1f2a:	91 81       	ldd	r25, Z+1	; 0x01
    1f2c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <LCD_VidSendNumber>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	aa ef       	ldi	r26, 0xFA	; 250
    1f36:	b3 e4       	ldi	r27, 0x43	; 67
    1f38:	8d ab       	std	Y+53, r24	; 0x35
    1f3a:	9e ab       	std	Y+54, r25	; 0x36
    1f3c:	af ab       	std	Y+55, r26	; 0x37
    1f3e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	6d a9       	ldd	r22, Y+53	; 0x35
    1f42:	7e a9       	ldd	r23, Y+54	; 0x36
    1f44:	8f a9       	ldd	r24, Y+55	; 0x37
    1f46:	98 ad       	ldd	r25, Y+56	; 0x38
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a e7       	ldi	r20, 0x7A	; 122
    1f4e:	55 e4       	ldi	r21, 0x45	; 69
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	89 ab       	std	Y+49, r24	; 0x31
    1f5a:	9a ab       	std	Y+50, r25	; 0x32
    1f5c:	ab ab       	std	Y+51, r26	; 0x33
    1f5e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f60:	69 a9       	ldd	r22, Y+49	; 0x31
    1f62:	7a a9       	ldd	r23, Y+50	; 0x32
    1f64:	8b a9       	ldd	r24, Y+51	; 0x33
    1f66:	9c a9       	ldd	r25, Y+52	; 0x34
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <main+0x32a>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	98 ab       	std	Y+48, r25	; 0x30
    1f7e:	8f a7       	std	Y+47, r24	; 0x2f
    1f80:	3f c0       	rjmp	.+126    	; 0x2000 <main+0x3a8>
	else if (__tmp > 65535)
    1f82:	69 a9       	ldd	r22, Y+49	; 0x31
    1f84:	7a a9       	ldd	r23, Y+50	; 0x32
    1f86:	8b a9       	ldd	r24, Y+51	; 0x33
    1f88:	9c a9       	ldd	r25, Y+52	; 0x34
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	4c f5       	brge	.+82     	; 0x1fec <main+0x394>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9c:	7e a9       	ldd	r23, Y+54	; 0x36
    1f9e:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa0:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	98 ab       	std	Y+48, r25	; 0x30
    1fc0:	8f a7       	std	Y+47, r24	; 0x2f
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <main+0x38a>
    1fc4:	80 e9       	ldi	r24, 0x90	; 144
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	9e a7       	std	Y+46, r25	; 0x2e
    1fca:	8d a7       	std	Y+45, r24	; 0x2d
    1fcc:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fce:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <main+0x378>
    1fd4:	9e a7       	std	Y+46, r25	; 0x2e
    1fd6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fda:	98 a9       	ldd	r25, Y+48	; 0x30
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	98 ab       	std	Y+48, r25	; 0x30
    1fe0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <main+0x36c>
    1fea:	14 c0       	rjmp	.+40     	; 0x2014 <main+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	69 a9       	ldd	r22, Y+49	; 0x31
    1fee:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	98 ab       	std	Y+48, r25	; 0x30
    1ffe:	8f a7       	std	Y+47, r24	; 0x2f
    2000:	8f a5       	ldd	r24, Y+47	; 0x2f
    2002:	98 a9       	ldd	r25, Y+48	; 0x30
    2004:	9c a7       	std	Y+44, r25	; 0x2c
    2006:	8b a7       	std	Y+43, r24	; 0x2b
    2008:	8b a5       	ldd	r24, Y+43	; 0x2b
    200a:	9c a5       	ldd	r25, Y+44	; 0x2c
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <main+0x3b4>
    2010:	9c a7       	std	Y+44, r25	; 0x2c
    2012:	8b a7       	std	Y+43, r24	; 0x2b
	    			_delay_ms(500);
	    			LCD_VidSendCommand(LCD_CLEAR);
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
	    		}
	    		if(op == '*'){
    201a:	fe 01       	movw	r30, r28
    201c:	eb 5a       	subi	r30, 0xAB	; 171
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 81       	ld	r24, Z
    2022:	8a 32       	cpi	r24, 0x2A	; 42
    2024:	09 f0       	breq	.+2      	; 0x2028 <main+0x3d0>
    2026:	9d c0       	rjmp	.+314    	; 0x2162 <main+0x50a>
	    			LCD_VidSendData(' ');
    2028:	80 e2       	ldi	r24, 0x20	; 32
    202a:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData('=');
    202e:	8d e3       	ldi	r24, 0x3D	; 61
    2030:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData(' ');
    2034:	80 e2       	ldi	r24, 0x20	; 32
    2036:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			int x = result * var;
    203a:	ae 01       	movw	r20, r28
    203c:	45 5b       	subi	r20, 0xB5	; 181
    203e:	5f 4f       	sbci	r21, 0xFF	; 255
    2040:	fe 01       	movw	r30, r28
    2042:	ed 5a       	subi	r30, 0xAD	; 173
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	de 01       	movw	r26, r28
    2048:	af 5a       	subi	r26, 0xAF	; 175
    204a:	bf 4f       	sbci	r27, 0xFF	; 255
    204c:	20 81       	ld	r18, Z
    204e:	31 81       	ldd	r19, Z+1	; 0x01
    2050:	8d 91       	ld	r24, X+
    2052:	9c 91       	ld	r25, X
    2054:	bc 01       	movw	r22, r24
    2056:	26 9f       	mul	r18, r22
    2058:	c0 01       	movw	r24, r0
    205a:	27 9f       	mul	r18, r23
    205c:	90 0d       	add	r25, r0
    205e:	36 9f       	mul	r19, r22
    2060:	90 0d       	add	r25, r0
    2062:	11 24       	eor	r1, r1
    2064:	fa 01       	movw	r30, r20
    2066:	91 83       	std	Z+1, r25	; 0x01
    2068:	80 83       	st	Z, r24
	    			LCD_VidSendNumber(x);
    206a:	fe 01       	movw	r30, r28
    206c:	e5 5b       	subi	r30, 0xB5	; 181
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	80 81       	ld	r24, Z
    2072:	91 81       	ldd	r25, Z+1	; 0x01
    2074:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <LCD_VidSendNumber>
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	aa ef       	ldi	r26, 0xFA	; 250
    207e:	b3 e4       	ldi	r27, 0x43	; 67
    2080:	8f a3       	std	Y+39, r24	; 0x27
    2082:	98 a7       	std	Y+40, r25	; 0x28
    2084:	a9 a7       	std	Y+41, r26	; 0x29
    2086:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2088:	6f a1       	ldd	r22, Y+39	; 0x27
    208a:	78 a5       	ldd	r23, Y+40	; 0x28
    208c:	89 a5       	ldd	r24, Y+41	; 0x29
    208e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	4a e7       	ldi	r20, 0x7A	; 122
    2096:	55 e4       	ldi	r21, 0x45	; 69
    2098:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	8b a3       	std	Y+35, r24	; 0x23
    20a2:	9c a3       	std	Y+36, r25	; 0x24
    20a4:	ad a3       	std	Y+37, r26	; 0x25
    20a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20a8:	6b a1       	ldd	r22, Y+35	; 0x23
    20aa:	7c a1       	ldd	r23, Y+36	; 0x24
    20ac:	8d a1       	ldd	r24, Y+37	; 0x25
    20ae:	9e a1       	ldd	r25, Y+38	; 0x26
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e8       	ldi	r20, 0x80	; 128
    20b6:	5f e3       	ldi	r21, 0x3F	; 63
    20b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20bc:	88 23       	and	r24, r24
    20be:	2c f4       	brge	.+10     	; 0x20ca <main+0x472>
		__ticks = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	3f c0       	rjmp	.+126    	; 0x2148 <main+0x4f0>
	else if (__tmp > 65535)
    20ca:	6b a1       	ldd	r22, Y+35	; 0x23
    20cc:	7c a1       	ldd	r23, Y+36	; 0x24
    20ce:	8d a1       	ldd	r24, Y+37	; 0x25
    20d0:	9e a1       	ldd	r25, Y+38	; 0x26
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	3f ef       	ldi	r19, 0xFF	; 255
    20d6:	4f e7       	ldi	r20, 0x7F	; 127
    20d8:	57 e4       	ldi	r21, 0x47	; 71
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20de:	18 16       	cp	r1, r24
    20e0:	4c f5       	brge	.+82     	; 0x2134 <main+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20e2:	6f a1       	ldd	r22, Y+39	; 0x27
    20e4:	78 a5       	ldd	r23, Y+40	; 0x28
    20e6:	89 a5       	ldd	r24, Y+41	; 0x29
    20e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e2       	ldi	r20, 0x20	; 32
    20f0:	51 e4       	ldi	r21, 0x41	; 65
    20f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	bc 01       	movw	r22, r24
    20fc:	cd 01       	movw	r24, r26
    20fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	9a a3       	std	Y+34, r25	; 0x22
    2108:	89 a3       	std	Y+33, r24	; 0x21
    210a:	0f c0       	rjmp	.+30     	; 0x212a <main+0x4d2>
    210c:	80 e9       	ldi	r24, 0x90	; 144
    210e:	91 e0       	ldi	r25, 0x01	; 1
    2110:	98 a3       	std	Y+32, r25	; 0x20
    2112:	8f 8f       	std	Y+31, r24	; 0x1f
    2114:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2116:	98 a1       	ldd	r25, Y+32	; 0x20
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	f1 f7       	brne	.-4      	; 0x2118 <main+0x4c0>
    211c:	98 a3       	std	Y+32, r25	; 0x20
    211e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2120:	89 a1       	ldd	r24, Y+33	; 0x21
    2122:	9a a1       	ldd	r25, Y+34	; 0x22
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	9a a3       	std	Y+34, r25	; 0x22
    2128:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    212a:	89 a1       	ldd	r24, Y+33	; 0x21
    212c:	9a a1       	ldd	r25, Y+34	; 0x22
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	69 f7       	brne	.-38     	; 0x210c <main+0x4b4>
    2132:	14 c0       	rjmp	.+40     	; 0x215c <main+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2134:	6b a1       	ldd	r22, Y+35	; 0x23
    2136:	7c a1       	ldd	r23, Y+36	; 0x24
    2138:	8d a1       	ldd	r24, Y+37	; 0x25
    213a:	9e a1       	ldd	r25, Y+38	; 0x26
    213c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	9a a3       	std	Y+34, r25	; 0x22
    2146:	89 a3       	std	Y+33, r24	; 0x21
    2148:	89 a1       	ldd	r24, Y+33	; 0x21
    214a:	9a a1       	ldd	r25, Y+34	; 0x22
    214c:	9e 8f       	std	Y+30, r25	; 0x1e
    214e:	8d 8f       	std	Y+29, r24	; 0x1d
    2150:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2152:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2154:	01 97       	sbiw	r24, 0x01	; 1
    2156:	f1 f7       	brne	.-4      	; 0x2154 <main+0x4fc>
    2158:	9e 8f       	std	Y+30, r25	; 0x1e
    215a:	8d 8f       	std	Y+29, r24	; 0x1d
	    			_delay_ms(500);
	    			LCD_VidSendCommand(LCD_CLEAR);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
	    		}
	    		if(op == '/'){
    2162:	fe 01       	movw	r30, r28
    2164:	eb 5a       	subi	r30, 0xAB	; 171
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	80 81       	ld	r24, Z
    216a:	8f 32       	cpi	r24, 0x2F	; 47
    216c:	09 f0       	breq	.+2      	; 0x2170 <main+0x518>
    216e:	99 c0       	rjmp	.+306    	; 0x22a2 <main+0x64a>
	    			LCD_VidSendData(' ');
    2170:	80 e2       	ldi	r24, 0x20	; 32
    2172:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData('=');
    2176:	8d e3       	ldi	r24, 0x3D	; 61
    2178:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData(' ');
    217c:	80 e2       	ldi	r24, 0x20	; 32
    217e:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			int x = result / var;
    2182:	8e 01       	movw	r16, r28
    2184:	07 5b       	subi	r16, 0xB7	; 183
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
    2188:	fe 01       	movw	r30, r28
    218a:	ed 5a       	subi	r30, 0xAD	; 173
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	de 01       	movw	r26, r28
    2190:	af 5a       	subi	r26, 0xAF	; 175
    2192:	bf 4f       	sbci	r27, 0xFF	; 255
    2194:	80 81       	ld	r24, Z
    2196:	91 81       	ldd	r25, Z+1	; 0x01
    2198:	2d 91       	ld	r18, X+
    219a:	3c 91       	ld	r19, X
    219c:	b9 01       	movw	r22, r18
    219e:	0e 94 21 12 	call	0x2442	; 0x2442 <__divmodhi4>
    21a2:	cb 01       	movw	r24, r22
    21a4:	f8 01       	movw	r30, r16
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	80 83       	st	Z, r24
	    			LCD_VidSendNumber(x);
    21aa:	fe 01       	movw	r30, r28
    21ac:	e7 5b       	subi	r30, 0xB7	; 183
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <LCD_VidSendNumber>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	aa ef       	ldi	r26, 0xFA	; 250
    21be:	b3 e4       	ldi	r27, 0x43	; 67
    21c0:	89 8f       	std	Y+25, r24	; 0x19
    21c2:	9a 8f       	std	Y+26, r25	; 0x1a
    21c4:	ab 8f       	std	Y+27, r26	; 0x1b
    21c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c8:	69 8d       	ldd	r22, Y+25	; 0x19
    21ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a e7       	ldi	r20, 0x7A	; 122
    21d6:	55 e4       	ldi	r21, 0x45	; 69
    21d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8d 8b       	std	Y+21, r24	; 0x15
    21e2:	9e 8b       	std	Y+22, r25	; 0x16
    21e4:	af 8b       	std	Y+23, r26	; 0x17
    21e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21e8:	6d 89       	ldd	r22, Y+21	; 0x15
    21ea:	7e 89       	ldd	r23, Y+22	; 0x16
    21ec:	8f 89       	ldd	r24, Y+23	; 0x17
    21ee:	98 8d       	ldd	r25, Y+24	; 0x18
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	2c f4       	brge	.+10     	; 0x220a <main+0x5b2>
		__ticks = 1;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9c 8b       	std	Y+20, r25	; 0x14
    2206:	8b 8b       	std	Y+19, r24	; 0x13
    2208:	3f c0       	rjmp	.+126    	; 0x2288 <main+0x630>
	else if (__tmp > 65535)
    220a:	6d 89       	ldd	r22, Y+21	; 0x15
    220c:	7e 89       	ldd	r23, Y+22	; 0x16
    220e:	8f 89       	ldd	r24, Y+23	; 0x17
    2210:	98 8d       	ldd	r25, Y+24	; 0x18
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	4c f5       	brge	.+82     	; 0x2274 <main+0x61c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	69 8d       	ldd	r22, Y+25	; 0x19
    2224:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2226:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2228:	9c 8d       	ldd	r25, Y+28	; 0x1c
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	51 e4       	ldi	r21, 0x41	; 65
    2232:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9c 8b       	std	Y+20, r25	; 0x14
    2248:	8b 8b       	std	Y+19, r24	; 0x13
    224a:	0f c0       	rjmp	.+30     	; 0x226a <main+0x612>
    224c:	80 e9       	ldi	r24, 0x90	; 144
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	9a 8b       	std	Y+18, r25	; 0x12
    2252:	89 8b       	std	Y+17, r24	; 0x11
    2254:	89 89       	ldd	r24, Y+17	; 0x11
    2256:	9a 89       	ldd	r25, Y+18	; 0x12
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <main+0x600>
    225c:	9a 8b       	std	Y+18, r25	; 0x12
    225e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	8b 89       	ldd	r24, Y+19	; 0x13
    2262:	9c 89       	ldd	r25, Y+20	; 0x14
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9c 8b       	std	Y+20, r25	; 0x14
    2268:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	69 f7       	brne	.-38     	; 0x224c <main+0x5f4>
    2272:	14 c0       	rjmp	.+40     	; 0x229c <main+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2274:	6d 89       	ldd	r22, Y+21	; 0x15
    2276:	7e 89       	ldd	r23, Y+22	; 0x16
    2278:	8f 89       	ldd	r24, Y+23	; 0x17
    227a:	98 8d       	ldd	r25, Y+24	; 0x18
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9c 8b       	std	Y+20, r25	; 0x14
    2286:	8b 8b       	std	Y+19, r24	; 0x13
    2288:	8b 89       	ldd	r24, Y+19	; 0x13
    228a:	9c 89       	ldd	r25, Y+20	; 0x14
    228c:	98 8b       	std	Y+16, r25	; 0x10
    228e:	8f 87       	std	Y+15, r24	; 0x0f
    2290:	8f 85       	ldd	r24, Y+15	; 0x0f
    2292:	98 89       	ldd	r25, Y+16	; 0x10
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <main+0x63c>
    2298:	98 8b       	std	Y+16, r25	; 0x10
    229a:	8f 87       	std	Y+15, r24	; 0x0f
	    			_delay_ms(500);
	    			LCD_VidSendCommand(LCD_CLEAR);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
	    		}
	    		if(op == '%'){
    22a2:	fe 01       	movw	r30, r28
    22a4:	eb 5a       	subi	r30, 0xAB	; 171
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	80 81       	ld	r24, Z
    22aa:	85 32       	cpi	r24, 0x25	; 37
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <main+0x658>
    22ae:	98 c0       	rjmp	.+304    	; 0x23e0 <main+0x788>
	    			LCD_VidSendData(' ');
    22b0:	80 e2       	ldi	r24, 0x20	; 32
    22b2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData('=');
    22b6:	8d e3       	ldi	r24, 0x3D	; 61
    22b8:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			LCD_VidSendData(' ');
    22bc:	80 e2       	ldi	r24, 0x20	; 32
    22be:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <LCD_VidSendData>
	    			int x = result % var;
    22c2:	8e 01       	movw	r16, r28
    22c4:	09 5b       	subi	r16, 0xB9	; 185
    22c6:	1f 4f       	sbci	r17, 0xFF	; 255
    22c8:	fe 01       	movw	r30, r28
    22ca:	ed 5a       	subi	r30, 0xAD	; 173
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	de 01       	movw	r26, r28
    22d0:	af 5a       	subi	r26, 0xAF	; 175
    22d2:	bf 4f       	sbci	r27, 0xFF	; 255
    22d4:	80 81       	ld	r24, Z
    22d6:	91 81       	ldd	r25, Z+1	; 0x01
    22d8:	2d 91       	ld	r18, X+
    22da:	3c 91       	ld	r19, X
    22dc:	b9 01       	movw	r22, r18
    22de:	0e 94 21 12 	call	0x2442	; 0x2442 <__divmodhi4>
    22e2:	f8 01       	movw	r30, r16
    22e4:	91 83       	std	Z+1, r25	; 0x01
    22e6:	80 83       	st	Z, r24
	    			LCD_VidSendNumber(x);
    22e8:	fe 01       	movw	r30, r28
    22ea:	e9 5b       	subi	r30, 0xB9	; 185
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	80 81       	ld	r24, Z
    22f0:	91 81       	ldd	r25, Z+1	; 0x01
    22f2:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <LCD_VidSendNumber>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	aa ef       	ldi	r26, 0xFA	; 250
    22fc:	b3 e4       	ldi	r27, 0x43	; 67
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	ad 87       	std	Y+13, r26	; 0x0d
    2304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a e7       	ldi	r20, 0x7A	; 122
    2314:	55 e4       	ldi	r21, 0x45	; 69
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	a9 87       	std	Y+9, r26	; 0x09
    2324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <main+0x6f0>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <main+0x76e>
	else if (__tmp > 65535)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <main+0x75a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6b 85       	ldd	r22, Y+11	; 0x0b
    2362:	7c 85       	ldd	r23, Y+12	; 0x0c
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <main+0x750>
    238a:	80 e9       	ldi	r24, 0x90	; 144
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <main+0x73e>
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <main+0x732>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <main+0x782>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <main+0x77a>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
	    			_delay_ms(500);
	    			LCD_VidSendCommand(LCD_CLEAR);
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	0e 94 43 09 	call	0x1286	; 0x1286 <LCD_VidSendCommand>
	    		}
	    		result = 0;
    23e0:	fe 01       	movw	r30, r28
    23e2:	ed 5a       	subi	r30, 0xAD	; 173
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	11 82       	std	Z+1, r1	; 0x01
    23e8:	10 82       	st	Z, r1
	    	    var = 0;
    23ea:	fe 01       	movw	r30, r28
    23ec:	ef 5a       	subi	r30, 0xAF	; 175
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	11 82       	std	Z+1, r1	; 0x01
    23f2:	10 82       	st	Z, r1
	    	    strcpy(valprev,"");
    23f4:	ce 01       	movw	r24, r28
    23f6:	88 5a       	subi	r24, 0xA8	; 168
    23f8:	9f 4f       	sbci	r25, 0xFF	; 255
    23fa:	23 e6       	ldi	r18, 0x63	; 99
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	b9 01       	movw	r22, r18
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	0e 94 9d 12 	call	0x253a	; 0x253a <memcpy>
    2408:	38 cc       	rjmp	.-1936   	; 0x1c7a <main+0x22>
	    	}
	    	else{
	    		char c = value +'0';
    240a:	fe 01       	movw	r30, r28
    240c:	ea 5a       	subi	r30, 0xAA	; 170
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 81       	ld	r24, Z
    2412:	80 5d       	subi	r24, 0xD0	; 208
    2414:	fe 01       	movw	r30, r28
    2416:	e4 59       	subi	r30, 0x94	; 148
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	80 83       	st	Z, r24
	    		strncat(valprev, &c, 1);
    241c:	ce 01       	movw	r24, r28
    241e:	88 5a       	subi	r24, 0xA8	; 168
    2420:	9f 4f       	sbci	r25, 0xFF	; 255
    2422:	9e 01       	movw	r18, r28
    2424:	24 59       	subi	r18, 0x94	; 148
    2426:	3f 4f       	sbci	r19, 0xFF	; 255
    2428:	b9 01       	movw	r22, r18
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	0e 94 a6 12 	call	0x254c	; 0x254c <strncat>
	    		LCD_VidSendNumber(value);
    2432:	fe 01       	movw	r30, r28
    2434:	ea 5a       	subi	r30, 0xAA	; 170
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <LCD_VidSendNumber>
    2440:	1c cc       	rjmp	.-1992   	; 0x1c7a <main+0x22>

00002442 <__divmodhi4>:
    2442:	97 fb       	bst	r25, 7
    2444:	09 2e       	mov	r0, r25
    2446:	07 26       	eor	r0, r23
    2448:	0a d0       	rcall	.+20     	; 0x245e <__divmodhi4_neg1>
    244a:	77 fd       	sbrc	r23, 7
    244c:	04 d0       	rcall	.+8      	; 0x2456 <__divmodhi4_neg2>
    244e:	0c d0       	rcall	.+24     	; 0x2468 <__udivmodhi4>
    2450:	06 d0       	rcall	.+12     	; 0x245e <__divmodhi4_neg1>
    2452:	00 20       	and	r0, r0
    2454:	1a f4       	brpl	.+6      	; 0x245c <__divmodhi4_exit>

00002456 <__divmodhi4_neg2>:
    2456:	70 95       	com	r23
    2458:	61 95       	neg	r22
    245a:	7f 4f       	sbci	r23, 0xFF	; 255

0000245c <__divmodhi4_exit>:
    245c:	08 95       	ret

0000245e <__divmodhi4_neg1>:
    245e:	f6 f7       	brtc	.-4      	; 0x245c <__divmodhi4_exit>
    2460:	90 95       	com	r25
    2462:	81 95       	neg	r24
    2464:	9f 4f       	sbci	r25, 0xFF	; 255
    2466:	08 95       	ret

00002468 <__udivmodhi4>:
    2468:	aa 1b       	sub	r26, r26
    246a:	bb 1b       	sub	r27, r27
    246c:	51 e1       	ldi	r21, 0x11	; 17
    246e:	07 c0       	rjmp	.+14     	; 0x247e <__udivmodhi4_ep>

00002470 <__udivmodhi4_loop>:
    2470:	aa 1f       	adc	r26, r26
    2472:	bb 1f       	adc	r27, r27
    2474:	a6 17       	cp	r26, r22
    2476:	b7 07       	cpc	r27, r23
    2478:	10 f0       	brcs	.+4      	; 0x247e <__udivmodhi4_ep>
    247a:	a6 1b       	sub	r26, r22
    247c:	b7 0b       	sbc	r27, r23

0000247e <__udivmodhi4_ep>:
    247e:	88 1f       	adc	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	5a 95       	dec	r21
    2484:	a9 f7       	brne	.-22     	; 0x2470 <__udivmodhi4_loop>
    2486:	80 95       	com	r24
    2488:	90 95       	com	r25
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	08 95       	ret

00002490 <__prologue_saves__>:
    2490:	2f 92       	push	r2
    2492:	3f 92       	push	r3
    2494:	4f 92       	push	r4
    2496:	5f 92       	push	r5
    2498:	6f 92       	push	r6
    249a:	7f 92       	push	r7
    249c:	8f 92       	push	r8
    249e:	9f 92       	push	r9
    24a0:	af 92       	push	r10
    24a2:	bf 92       	push	r11
    24a4:	cf 92       	push	r12
    24a6:	df 92       	push	r13
    24a8:	ef 92       	push	r14
    24aa:	ff 92       	push	r15
    24ac:	0f 93       	push	r16
    24ae:	1f 93       	push	r17
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	ca 1b       	sub	r28, r26
    24ba:	db 0b       	sbc	r29, r27
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	09 94       	ijmp

000024c8 <__epilogue_restores__>:
    24c8:	2a 88       	ldd	r2, Y+18	; 0x12
    24ca:	39 88       	ldd	r3, Y+17	; 0x11
    24cc:	48 88       	ldd	r4, Y+16	; 0x10
    24ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    24d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    24d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    24d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    24d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    24d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    24da:	b9 84       	ldd	r11, Y+9	; 0x09
    24dc:	c8 84       	ldd	r12, Y+8	; 0x08
    24de:	df 80       	ldd	r13, Y+7	; 0x07
    24e0:	ee 80       	ldd	r14, Y+6	; 0x06
    24e2:	fd 80       	ldd	r15, Y+5	; 0x05
    24e4:	0c 81       	ldd	r16, Y+4	; 0x04
    24e6:	1b 81       	ldd	r17, Y+3	; 0x03
    24e8:	aa 81       	ldd	r26, Y+2	; 0x02
    24ea:	b9 81       	ldd	r27, Y+1	; 0x01
    24ec:	ce 0f       	add	r28, r30
    24ee:	d1 1d       	adc	r29, r1
    24f0:	0f b6       	in	r0, 0x3f	; 63
    24f2:	f8 94       	cli
    24f4:	de bf       	out	0x3e, r29	; 62
    24f6:	0f be       	out	0x3f, r0	; 63
    24f8:	cd bf       	out	0x3d, r28	; 61
    24fa:	ed 01       	movw	r28, r26
    24fc:	08 95       	ret

000024fe <atoi>:
    24fe:	fc 01       	movw	r30, r24
    2500:	88 27       	eor	r24, r24
    2502:	99 27       	eor	r25, r25
    2504:	e8 94       	clt
    2506:	21 91       	ld	r18, Z+
    2508:	20 32       	cpi	r18, 0x20	; 32
    250a:	e9 f3       	breq	.-6      	; 0x2506 <atoi+0x8>
    250c:	29 30       	cpi	r18, 0x09	; 9
    250e:	10 f0       	brcs	.+4      	; 0x2514 <atoi+0x16>
    2510:	2e 30       	cpi	r18, 0x0E	; 14
    2512:	c8 f3       	brcs	.-14     	; 0x2506 <atoi+0x8>
    2514:	2b 32       	cpi	r18, 0x2B	; 43
    2516:	41 f0       	breq	.+16     	; 0x2528 <atoi+0x2a>
    2518:	2d 32       	cpi	r18, 0x2D	; 45
    251a:	39 f4       	brne	.+14     	; 0x252a <atoi+0x2c>
    251c:	68 94       	set
    251e:	04 c0       	rjmp	.+8      	; 0x2528 <atoi+0x2a>
    2520:	0e 94 b6 12 	call	0x256c	; 0x256c <__mulhi_const_10>
    2524:	82 0f       	add	r24, r18
    2526:	91 1d       	adc	r25, r1
    2528:	21 91       	ld	r18, Z+
    252a:	20 53       	subi	r18, 0x30	; 48
    252c:	2a 30       	cpi	r18, 0x0A	; 10
    252e:	c0 f3       	brcs	.-16     	; 0x2520 <atoi+0x22>
    2530:	1e f4       	brtc	.+6      	; 0x2538 <atoi+0x3a>
    2532:	90 95       	com	r25
    2534:	81 95       	neg	r24
    2536:	9f 4f       	sbci	r25, 0xFF	; 255
    2538:	08 95       	ret

0000253a <memcpy>:
    253a:	fb 01       	movw	r30, r22
    253c:	dc 01       	movw	r26, r24
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <memcpy+0xa>
    2540:	01 90       	ld	r0, Z+
    2542:	0d 92       	st	X+, r0
    2544:	41 50       	subi	r20, 0x01	; 1
    2546:	50 40       	sbci	r21, 0x00	; 0
    2548:	d8 f7       	brcc	.-10     	; 0x2540 <memcpy+0x6>
    254a:	08 95       	ret

0000254c <strncat>:
    254c:	fb 01       	movw	r30, r22
    254e:	dc 01       	movw	r26, r24
    2550:	0d 90       	ld	r0, X+
    2552:	00 20       	and	r0, r0
    2554:	e9 f7       	brne	.-6      	; 0x2550 <strncat+0x4>
    2556:	11 97       	sbiw	r26, 0x01	; 1
    2558:	41 50       	subi	r20, 0x01	; 1
    255a:	50 40       	sbci	r21, 0x00	; 0
    255c:	28 f0       	brcs	.+10     	; 0x2568 <strncat+0x1c>
    255e:	01 90       	ld	r0, Z+
    2560:	00 20       	and	r0, r0
    2562:	0d 92       	st	X+, r0
    2564:	c9 f7       	brne	.-14     	; 0x2558 <strncat+0xc>
    2566:	08 95       	ret
    2568:	1c 92       	st	X, r1
    256a:	08 95       	ret

0000256c <__mulhi_const_10>:
    256c:	7a e0       	ldi	r23, 0x0A	; 10
    256e:	97 9f       	mul	r25, r23
    2570:	90 2d       	mov	r25, r0
    2572:	87 9f       	mul	r24, r23
    2574:	80 2d       	mov	r24, r0
    2576:	91 0d       	add	r25, r1
    2578:	11 24       	eor	r1, r1
    257a:	08 95       	ret

0000257c <sprintf>:
    257c:	ae e0       	ldi	r26, 0x0E	; 14
    257e:	b0 e0       	ldi	r27, 0x00	; 0
    2580:	e4 ec       	ldi	r30, 0xC4	; 196
    2582:	f2 e1       	ldi	r31, 0x12	; 18
    2584:	0c 94 56 12 	jmp	0x24ac	; 0x24ac <__prologue_saves__+0x1c>
    2588:	0d 89       	ldd	r16, Y+21	; 0x15
    258a:	1e 89       	ldd	r17, Y+22	; 0x16
    258c:	86 e0       	ldi	r24, 0x06	; 6
    258e:	8c 83       	std	Y+4, r24	; 0x04
    2590:	1a 83       	std	Y+2, r17	; 0x02
    2592:	09 83       	std	Y+1, r16	; 0x01
    2594:	8f ef       	ldi	r24, 0xFF	; 255
    2596:	9f e7       	ldi	r25, 0x7F	; 127
    2598:	9e 83       	std	Y+6, r25	; 0x06
    259a:	8d 83       	std	Y+5, r24	; 0x05
    259c:	9e 01       	movw	r18, r28
    259e:	27 5e       	subi	r18, 0xE7	; 231
    25a0:	3f 4f       	sbci	r19, 0xFF	; 255
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
    25a6:	6f 89       	ldd	r22, Y+23	; 0x17
    25a8:	78 8d       	ldd	r23, Y+24	; 0x18
    25aa:	a9 01       	movw	r20, r18
    25ac:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <vfprintf>
    25b0:	2f 81       	ldd	r18, Y+7	; 0x07
    25b2:	38 85       	ldd	r19, Y+8	; 0x08
    25b4:	02 0f       	add	r16, r18
    25b6:	13 1f       	adc	r17, r19
    25b8:	f8 01       	movw	r30, r16
    25ba:	10 82       	st	Z, r1
    25bc:	2e 96       	adiw	r28, 0x0e	; 14
    25be:	e4 e0       	ldi	r30, 0x04	; 4
    25c0:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <__epilogue_restores__+0x1c>

000025c4 <vfprintf>:
    25c4:	ab e0       	ldi	r26, 0x0B	; 11
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e8 ee       	ldi	r30, 0xE8	; 232
    25ca:	f2 e1       	ldi	r31, 0x12	; 18
    25cc:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__prologue_saves__>
    25d0:	3c 01       	movw	r6, r24
    25d2:	2b 01       	movw	r4, r22
    25d4:	5a 01       	movw	r10, r20
    25d6:	fc 01       	movw	r30, r24
    25d8:	17 82       	std	Z+7, r1	; 0x07
    25da:	16 82       	std	Z+6, r1	; 0x06
    25dc:	83 81       	ldd	r24, Z+3	; 0x03
    25de:	81 fd       	sbrc	r24, 1
    25e0:	03 c0       	rjmp	.+6      	; 0x25e8 <vfprintf+0x24>
    25e2:	6f ef       	ldi	r22, 0xFF	; 255
    25e4:	7f ef       	ldi	r23, 0xFF	; 255
    25e6:	c6 c1       	rjmp	.+908    	; 0x2974 <vfprintf+0x3b0>
    25e8:	9a e0       	ldi	r25, 0x0A	; 10
    25ea:	89 2e       	mov	r8, r25
    25ec:	1e 01       	movw	r2, r28
    25ee:	08 94       	sec
    25f0:	21 1c       	adc	r2, r1
    25f2:	31 1c       	adc	r3, r1
    25f4:	f3 01       	movw	r30, r6
    25f6:	23 81       	ldd	r18, Z+3	; 0x03
    25f8:	f2 01       	movw	r30, r4
    25fa:	23 fd       	sbrc	r18, 3
    25fc:	85 91       	lpm	r24, Z+
    25fe:	23 ff       	sbrs	r18, 3
    2600:	81 91       	ld	r24, Z+
    2602:	2f 01       	movw	r4, r30
    2604:	88 23       	and	r24, r24
    2606:	09 f4       	brne	.+2      	; 0x260a <vfprintf+0x46>
    2608:	b2 c1       	rjmp	.+868    	; 0x296e <vfprintf+0x3aa>
    260a:	85 32       	cpi	r24, 0x25	; 37
    260c:	39 f4       	brne	.+14     	; 0x261c <vfprintf+0x58>
    260e:	23 fd       	sbrc	r18, 3
    2610:	85 91       	lpm	r24, Z+
    2612:	23 ff       	sbrs	r18, 3
    2614:	81 91       	ld	r24, Z+
    2616:	2f 01       	movw	r4, r30
    2618:	85 32       	cpi	r24, 0x25	; 37
    261a:	29 f4       	brne	.+10     	; 0x2626 <vfprintf+0x62>
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	b3 01       	movw	r22, r6
    2620:	0e 94 d5 14 	call	0x29aa	; 0x29aa <fputc>
    2624:	e7 cf       	rjmp	.-50     	; 0x25f4 <vfprintf+0x30>
    2626:	98 2f       	mov	r25, r24
    2628:	ff 24       	eor	r15, r15
    262a:	ee 24       	eor	r14, r14
    262c:	99 24       	eor	r9, r9
    262e:	ff e1       	ldi	r31, 0x1F	; 31
    2630:	ff 15       	cp	r31, r15
    2632:	d0 f0       	brcs	.+52     	; 0x2668 <vfprintf+0xa4>
    2634:	9b 32       	cpi	r25, 0x2B	; 43
    2636:	69 f0       	breq	.+26     	; 0x2652 <vfprintf+0x8e>
    2638:	9c 32       	cpi	r25, 0x2C	; 44
    263a:	28 f4       	brcc	.+10     	; 0x2646 <vfprintf+0x82>
    263c:	90 32       	cpi	r25, 0x20	; 32
    263e:	59 f0       	breq	.+22     	; 0x2656 <vfprintf+0x92>
    2640:	93 32       	cpi	r25, 0x23	; 35
    2642:	91 f4       	brne	.+36     	; 0x2668 <vfprintf+0xa4>
    2644:	0e c0       	rjmp	.+28     	; 0x2662 <vfprintf+0x9e>
    2646:	9d 32       	cpi	r25, 0x2D	; 45
    2648:	49 f0       	breq	.+18     	; 0x265c <vfprintf+0x98>
    264a:	90 33       	cpi	r25, 0x30	; 48
    264c:	69 f4       	brne	.+26     	; 0x2668 <vfprintf+0xa4>
    264e:	41 e0       	ldi	r20, 0x01	; 1
    2650:	24 c0       	rjmp	.+72     	; 0x269a <vfprintf+0xd6>
    2652:	52 e0       	ldi	r21, 0x02	; 2
    2654:	f5 2a       	or	r15, r21
    2656:	84 e0       	ldi	r24, 0x04	; 4
    2658:	f8 2a       	or	r15, r24
    265a:	28 c0       	rjmp	.+80     	; 0x26ac <vfprintf+0xe8>
    265c:	98 e0       	ldi	r25, 0x08	; 8
    265e:	f9 2a       	or	r15, r25
    2660:	25 c0       	rjmp	.+74     	; 0x26ac <vfprintf+0xe8>
    2662:	e0 e1       	ldi	r30, 0x10	; 16
    2664:	fe 2a       	or	r15, r30
    2666:	22 c0       	rjmp	.+68     	; 0x26ac <vfprintf+0xe8>
    2668:	f7 fc       	sbrc	r15, 7
    266a:	29 c0       	rjmp	.+82     	; 0x26be <vfprintf+0xfa>
    266c:	89 2f       	mov	r24, r25
    266e:	80 53       	subi	r24, 0x30	; 48
    2670:	8a 30       	cpi	r24, 0x0A	; 10
    2672:	70 f4       	brcc	.+28     	; 0x2690 <vfprintf+0xcc>
    2674:	f6 fe       	sbrs	r15, 6
    2676:	05 c0       	rjmp	.+10     	; 0x2682 <vfprintf+0xbe>
    2678:	98 9c       	mul	r9, r8
    267a:	90 2c       	mov	r9, r0
    267c:	11 24       	eor	r1, r1
    267e:	98 0e       	add	r9, r24
    2680:	15 c0       	rjmp	.+42     	; 0x26ac <vfprintf+0xe8>
    2682:	e8 9c       	mul	r14, r8
    2684:	e0 2c       	mov	r14, r0
    2686:	11 24       	eor	r1, r1
    2688:	e8 0e       	add	r14, r24
    268a:	f0 e2       	ldi	r31, 0x20	; 32
    268c:	ff 2a       	or	r15, r31
    268e:	0e c0       	rjmp	.+28     	; 0x26ac <vfprintf+0xe8>
    2690:	9e 32       	cpi	r25, 0x2E	; 46
    2692:	29 f4       	brne	.+10     	; 0x269e <vfprintf+0xda>
    2694:	f6 fc       	sbrc	r15, 6
    2696:	6b c1       	rjmp	.+726    	; 0x296e <vfprintf+0x3aa>
    2698:	40 e4       	ldi	r20, 0x40	; 64
    269a:	f4 2a       	or	r15, r20
    269c:	07 c0       	rjmp	.+14     	; 0x26ac <vfprintf+0xe8>
    269e:	9c 36       	cpi	r25, 0x6C	; 108
    26a0:	19 f4       	brne	.+6      	; 0x26a8 <vfprintf+0xe4>
    26a2:	50 e8       	ldi	r21, 0x80	; 128
    26a4:	f5 2a       	or	r15, r21
    26a6:	02 c0       	rjmp	.+4      	; 0x26ac <vfprintf+0xe8>
    26a8:	98 36       	cpi	r25, 0x68	; 104
    26aa:	49 f4       	brne	.+18     	; 0x26be <vfprintf+0xfa>
    26ac:	f2 01       	movw	r30, r4
    26ae:	23 fd       	sbrc	r18, 3
    26b0:	95 91       	lpm	r25, Z+
    26b2:	23 ff       	sbrs	r18, 3
    26b4:	91 91       	ld	r25, Z+
    26b6:	2f 01       	movw	r4, r30
    26b8:	99 23       	and	r25, r25
    26ba:	09 f0       	breq	.+2      	; 0x26be <vfprintf+0xfa>
    26bc:	b8 cf       	rjmp	.-144    	; 0x262e <vfprintf+0x6a>
    26be:	89 2f       	mov	r24, r25
    26c0:	85 54       	subi	r24, 0x45	; 69
    26c2:	83 30       	cpi	r24, 0x03	; 3
    26c4:	18 f0       	brcs	.+6      	; 0x26cc <vfprintf+0x108>
    26c6:	80 52       	subi	r24, 0x20	; 32
    26c8:	83 30       	cpi	r24, 0x03	; 3
    26ca:	38 f4       	brcc	.+14     	; 0x26da <vfprintf+0x116>
    26cc:	44 e0       	ldi	r20, 0x04	; 4
    26ce:	50 e0       	ldi	r21, 0x00	; 0
    26d0:	a4 0e       	add	r10, r20
    26d2:	b5 1e       	adc	r11, r21
    26d4:	5f e3       	ldi	r21, 0x3F	; 63
    26d6:	59 83       	std	Y+1, r21	; 0x01
    26d8:	0f c0       	rjmp	.+30     	; 0x26f8 <vfprintf+0x134>
    26da:	93 36       	cpi	r25, 0x63	; 99
    26dc:	31 f0       	breq	.+12     	; 0x26ea <vfprintf+0x126>
    26de:	93 37       	cpi	r25, 0x73	; 115
    26e0:	79 f0       	breq	.+30     	; 0x2700 <vfprintf+0x13c>
    26e2:	93 35       	cpi	r25, 0x53	; 83
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <vfprintf+0x124>
    26e6:	56 c0       	rjmp	.+172    	; 0x2794 <vfprintf+0x1d0>
    26e8:	20 c0       	rjmp	.+64     	; 0x272a <vfprintf+0x166>
    26ea:	f5 01       	movw	r30, r10
    26ec:	80 81       	ld	r24, Z
    26ee:	89 83       	std	Y+1, r24	; 0x01
    26f0:	42 e0       	ldi	r20, 0x02	; 2
    26f2:	50 e0       	ldi	r21, 0x00	; 0
    26f4:	a4 0e       	add	r10, r20
    26f6:	b5 1e       	adc	r11, r21
    26f8:	61 01       	movw	r12, r2
    26fa:	01 e0       	ldi	r16, 0x01	; 1
    26fc:	10 e0       	ldi	r17, 0x00	; 0
    26fe:	12 c0       	rjmp	.+36     	; 0x2724 <vfprintf+0x160>
    2700:	f5 01       	movw	r30, r10
    2702:	c0 80       	ld	r12, Z
    2704:	d1 80       	ldd	r13, Z+1	; 0x01
    2706:	f6 fc       	sbrc	r15, 6
    2708:	03 c0       	rjmp	.+6      	; 0x2710 <vfprintf+0x14c>
    270a:	6f ef       	ldi	r22, 0xFF	; 255
    270c:	7f ef       	ldi	r23, 0xFF	; 255
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <vfprintf+0x150>
    2710:	69 2d       	mov	r22, r9
    2712:	70 e0       	ldi	r23, 0x00	; 0
    2714:	42 e0       	ldi	r20, 0x02	; 2
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	a4 0e       	add	r10, r20
    271a:	b5 1e       	adc	r11, r21
    271c:	c6 01       	movw	r24, r12
    271e:	0e 94 ca 14 	call	0x2994	; 0x2994 <strnlen>
    2722:	8c 01       	movw	r16, r24
    2724:	5f e7       	ldi	r21, 0x7F	; 127
    2726:	f5 22       	and	r15, r21
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <vfprintf+0x18e>
    272a:	f5 01       	movw	r30, r10
    272c:	c0 80       	ld	r12, Z
    272e:	d1 80       	ldd	r13, Z+1	; 0x01
    2730:	f6 fc       	sbrc	r15, 6
    2732:	03 c0       	rjmp	.+6      	; 0x273a <vfprintf+0x176>
    2734:	6f ef       	ldi	r22, 0xFF	; 255
    2736:	7f ef       	ldi	r23, 0xFF	; 255
    2738:	02 c0       	rjmp	.+4      	; 0x273e <vfprintf+0x17a>
    273a:	69 2d       	mov	r22, r9
    273c:	70 e0       	ldi	r23, 0x00	; 0
    273e:	42 e0       	ldi	r20, 0x02	; 2
    2740:	50 e0       	ldi	r21, 0x00	; 0
    2742:	a4 0e       	add	r10, r20
    2744:	b5 1e       	adc	r11, r21
    2746:	c6 01       	movw	r24, r12
    2748:	0e 94 bf 14 	call	0x297e	; 0x297e <strnlen_P>
    274c:	8c 01       	movw	r16, r24
    274e:	50 e8       	ldi	r21, 0x80	; 128
    2750:	f5 2a       	or	r15, r21
    2752:	f3 fe       	sbrs	r15, 3
    2754:	07 c0       	rjmp	.+14     	; 0x2764 <vfprintf+0x1a0>
    2756:	1a c0       	rjmp	.+52     	; 0x278c <vfprintf+0x1c8>
    2758:	80 e2       	ldi	r24, 0x20	; 32
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	b3 01       	movw	r22, r6
    275e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <fputc>
    2762:	ea 94       	dec	r14
    2764:	8e 2d       	mov	r24, r14
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	08 17       	cp	r16, r24
    276a:	19 07       	cpc	r17, r25
    276c:	a8 f3       	brcs	.-22     	; 0x2758 <vfprintf+0x194>
    276e:	0e c0       	rjmp	.+28     	; 0x278c <vfprintf+0x1c8>
    2770:	f6 01       	movw	r30, r12
    2772:	f7 fc       	sbrc	r15, 7
    2774:	85 91       	lpm	r24, Z+
    2776:	f7 fe       	sbrs	r15, 7
    2778:	81 91       	ld	r24, Z+
    277a:	6f 01       	movw	r12, r30
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	b3 01       	movw	r22, r6
    2780:	0e 94 d5 14 	call	0x29aa	; 0x29aa <fputc>
    2784:	e1 10       	cpse	r14, r1
    2786:	ea 94       	dec	r14
    2788:	01 50       	subi	r16, 0x01	; 1
    278a:	10 40       	sbci	r17, 0x00	; 0
    278c:	01 15       	cp	r16, r1
    278e:	11 05       	cpc	r17, r1
    2790:	79 f7       	brne	.-34     	; 0x2770 <vfprintf+0x1ac>
    2792:	ea c0       	rjmp	.+468    	; 0x2968 <vfprintf+0x3a4>
    2794:	94 36       	cpi	r25, 0x64	; 100
    2796:	11 f0       	breq	.+4      	; 0x279c <vfprintf+0x1d8>
    2798:	99 36       	cpi	r25, 0x69	; 105
    279a:	69 f5       	brne	.+90     	; 0x27f6 <vfprintf+0x232>
    279c:	f7 fe       	sbrs	r15, 7
    279e:	08 c0       	rjmp	.+16     	; 0x27b0 <vfprintf+0x1ec>
    27a0:	f5 01       	movw	r30, r10
    27a2:	20 81       	ld	r18, Z
    27a4:	31 81       	ldd	r19, Z+1	; 0x01
    27a6:	42 81       	ldd	r20, Z+2	; 0x02
    27a8:	53 81       	ldd	r21, Z+3	; 0x03
    27aa:	84 e0       	ldi	r24, 0x04	; 4
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	0a c0       	rjmp	.+20     	; 0x27c4 <vfprintf+0x200>
    27b0:	f5 01       	movw	r30, r10
    27b2:	80 81       	ld	r24, Z
    27b4:	91 81       	ldd	r25, Z+1	; 0x01
    27b6:	9c 01       	movw	r18, r24
    27b8:	44 27       	eor	r20, r20
    27ba:	37 fd       	sbrc	r19, 7
    27bc:	40 95       	com	r20
    27be:	54 2f       	mov	r21, r20
    27c0:	82 e0       	ldi	r24, 0x02	; 2
    27c2:	90 e0       	ldi	r25, 0x00	; 0
    27c4:	a8 0e       	add	r10, r24
    27c6:	b9 1e       	adc	r11, r25
    27c8:	9f e6       	ldi	r25, 0x6F	; 111
    27ca:	f9 22       	and	r15, r25
    27cc:	57 ff       	sbrs	r21, 7
    27ce:	09 c0       	rjmp	.+18     	; 0x27e2 <vfprintf+0x21e>
    27d0:	50 95       	com	r21
    27d2:	40 95       	com	r20
    27d4:	30 95       	com	r19
    27d6:	21 95       	neg	r18
    27d8:	3f 4f       	sbci	r19, 0xFF	; 255
    27da:	4f 4f       	sbci	r20, 0xFF	; 255
    27dc:	5f 4f       	sbci	r21, 0xFF	; 255
    27de:	e0 e8       	ldi	r30, 0x80	; 128
    27e0:	fe 2a       	or	r15, r30
    27e2:	ca 01       	movw	r24, r20
    27e4:	b9 01       	movw	r22, r18
    27e6:	a1 01       	movw	r20, r2
    27e8:	2a e0       	ldi	r18, 0x0A	; 10
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	0e 94 01 15 	call	0x2a02	; 0x2a02 <__ultoa_invert>
    27f0:	d8 2e       	mov	r13, r24
    27f2:	d2 18       	sub	r13, r2
    27f4:	40 c0       	rjmp	.+128    	; 0x2876 <vfprintf+0x2b2>
    27f6:	95 37       	cpi	r25, 0x75	; 117
    27f8:	29 f4       	brne	.+10     	; 0x2804 <vfprintf+0x240>
    27fa:	1f 2d       	mov	r17, r15
    27fc:	1f 7e       	andi	r17, 0xEF	; 239
    27fe:	2a e0       	ldi	r18, 0x0A	; 10
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	1d c0       	rjmp	.+58     	; 0x283e <vfprintf+0x27a>
    2804:	1f 2d       	mov	r17, r15
    2806:	19 7f       	andi	r17, 0xF9	; 249
    2808:	9f 36       	cpi	r25, 0x6F	; 111
    280a:	61 f0       	breq	.+24     	; 0x2824 <vfprintf+0x260>
    280c:	90 37       	cpi	r25, 0x70	; 112
    280e:	20 f4       	brcc	.+8      	; 0x2818 <vfprintf+0x254>
    2810:	98 35       	cpi	r25, 0x58	; 88
    2812:	09 f0       	breq	.+2      	; 0x2816 <vfprintf+0x252>
    2814:	ac c0       	rjmp	.+344    	; 0x296e <vfprintf+0x3aa>
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <vfprintf+0x272>
    2818:	90 37       	cpi	r25, 0x70	; 112
    281a:	39 f0       	breq	.+14     	; 0x282a <vfprintf+0x266>
    281c:	98 37       	cpi	r25, 0x78	; 120
    281e:	09 f0       	breq	.+2      	; 0x2822 <vfprintf+0x25e>
    2820:	a6 c0       	rjmp	.+332    	; 0x296e <vfprintf+0x3aa>
    2822:	04 c0       	rjmp	.+8      	; 0x282c <vfprintf+0x268>
    2824:	28 e0       	ldi	r18, 0x08	; 8
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	0a c0       	rjmp	.+20     	; 0x283e <vfprintf+0x27a>
    282a:	10 61       	ori	r17, 0x10	; 16
    282c:	14 fd       	sbrc	r17, 4
    282e:	14 60       	ori	r17, 0x04	; 4
    2830:	20 e1       	ldi	r18, 0x10	; 16
    2832:	30 e0       	ldi	r19, 0x00	; 0
    2834:	04 c0       	rjmp	.+8      	; 0x283e <vfprintf+0x27a>
    2836:	14 fd       	sbrc	r17, 4
    2838:	16 60       	ori	r17, 0x06	; 6
    283a:	20 e1       	ldi	r18, 0x10	; 16
    283c:	32 e0       	ldi	r19, 0x02	; 2
    283e:	17 ff       	sbrs	r17, 7
    2840:	08 c0       	rjmp	.+16     	; 0x2852 <vfprintf+0x28e>
    2842:	f5 01       	movw	r30, r10
    2844:	60 81       	ld	r22, Z
    2846:	71 81       	ldd	r23, Z+1	; 0x01
    2848:	82 81       	ldd	r24, Z+2	; 0x02
    284a:	93 81       	ldd	r25, Z+3	; 0x03
    284c:	44 e0       	ldi	r20, 0x04	; 4
    284e:	50 e0       	ldi	r21, 0x00	; 0
    2850:	08 c0       	rjmp	.+16     	; 0x2862 <vfprintf+0x29e>
    2852:	f5 01       	movw	r30, r10
    2854:	80 81       	ld	r24, Z
    2856:	91 81       	ldd	r25, Z+1	; 0x01
    2858:	bc 01       	movw	r22, r24
    285a:	80 e0       	ldi	r24, 0x00	; 0
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	42 e0       	ldi	r20, 0x02	; 2
    2860:	50 e0       	ldi	r21, 0x00	; 0
    2862:	a4 0e       	add	r10, r20
    2864:	b5 1e       	adc	r11, r21
    2866:	a1 01       	movw	r20, r2
    2868:	0e 94 01 15 	call	0x2a02	; 0x2a02 <__ultoa_invert>
    286c:	d8 2e       	mov	r13, r24
    286e:	d2 18       	sub	r13, r2
    2870:	8f e7       	ldi	r24, 0x7F	; 127
    2872:	f8 2e       	mov	r15, r24
    2874:	f1 22       	and	r15, r17
    2876:	f6 fe       	sbrs	r15, 6
    2878:	0b c0       	rjmp	.+22     	; 0x2890 <vfprintf+0x2cc>
    287a:	5e ef       	ldi	r21, 0xFE	; 254
    287c:	f5 22       	and	r15, r21
    287e:	d9 14       	cp	r13, r9
    2880:	38 f4       	brcc	.+14     	; 0x2890 <vfprintf+0x2cc>
    2882:	f4 fe       	sbrs	r15, 4
    2884:	07 c0       	rjmp	.+14     	; 0x2894 <vfprintf+0x2d0>
    2886:	f2 fc       	sbrc	r15, 2
    2888:	05 c0       	rjmp	.+10     	; 0x2894 <vfprintf+0x2d0>
    288a:	8f ee       	ldi	r24, 0xEF	; 239
    288c:	f8 22       	and	r15, r24
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <vfprintf+0x2d0>
    2890:	1d 2d       	mov	r17, r13
    2892:	01 c0       	rjmp	.+2      	; 0x2896 <vfprintf+0x2d2>
    2894:	19 2d       	mov	r17, r9
    2896:	f4 fe       	sbrs	r15, 4
    2898:	0d c0       	rjmp	.+26     	; 0x28b4 <vfprintf+0x2f0>
    289a:	fe 01       	movw	r30, r28
    289c:	ed 0d       	add	r30, r13
    289e:	f1 1d       	adc	r31, r1
    28a0:	80 81       	ld	r24, Z
    28a2:	80 33       	cpi	r24, 0x30	; 48
    28a4:	19 f4       	brne	.+6      	; 0x28ac <vfprintf+0x2e8>
    28a6:	99 ee       	ldi	r25, 0xE9	; 233
    28a8:	f9 22       	and	r15, r25
    28aa:	08 c0       	rjmp	.+16     	; 0x28bc <vfprintf+0x2f8>
    28ac:	1f 5f       	subi	r17, 0xFF	; 255
    28ae:	f2 fe       	sbrs	r15, 2
    28b0:	05 c0       	rjmp	.+10     	; 0x28bc <vfprintf+0x2f8>
    28b2:	03 c0       	rjmp	.+6      	; 0x28ba <vfprintf+0x2f6>
    28b4:	8f 2d       	mov	r24, r15
    28b6:	86 78       	andi	r24, 0x86	; 134
    28b8:	09 f0       	breq	.+2      	; 0x28bc <vfprintf+0x2f8>
    28ba:	1f 5f       	subi	r17, 0xFF	; 255
    28bc:	0f 2d       	mov	r16, r15
    28be:	f3 fc       	sbrc	r15, 3
    28c0:	14 c0       	rjmp	.+40     	; 0x28ea <vfprintf+0x326>
    28c2:	f0 fe       	sbrs	r15, 0
    28c4:	0f c0       	rjmp	.+30     	; 0x28e4 <vfprintf+0x320>
    28c6:	1e 15       	cp	r17, r14
    28c8:	10 f0       	brcs	.+4      	; 0x28ce <vfprintf+0x30a>
    28ca:	9d 2c       	mov	r9, r13
    28cc:	0b c0       	rjmp	.+22     	; 0x28e4 <vfprintf+0x320>
    28ce:	9d 2c       	mov	r9, r13
    28d0:	9e 0c       	add	r9, r14
    28d2:	91 1a       	sub	r9, r17
    28d4:	1e 2d       	mov	r17, r14
    28d6:	06 c0       	rjmp	.+12     	; 0x28e4 <vfprintf+0x320>
    28d8:	80 e2       	ldi	r24, 0x20	; 32
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	b3 01       	movw	r22, r6
    28de:	0e 94 d5 14 	call	0x29aa	; 0x29aa <fputc>
    28e2:	1f 5f       	subi	r17, 0xFF	; 255
    28e4:	1e 15       	cp	r17, r14
    28e6:	c0 f3       	brcs	.-16     	; 0x28d8 <vfprintf+0x314>
    28e8:	04 c0       	rjmp	.+8      	; 0x28f2 <vfprintf+0x32e>
    28ea:	1e 15       	cp	r17, r14
    28ec:	10 f4       	brcc	.+4      	; 0x28f2 <vfprintf+0x32e>
    28ee:	e1 1a       	sub	r14, r17
    28f0:	01 c0       	rjmp	.+2      	; 0x28f4 <vfprintf+0x330>
    28f2:	ee 24       	eor	r14, r14
    28f4:	04 ff       	sbrs	r16, 4
    28f6:	0f c0       	rjmp	.+30     	; 0x2916 <vfprintf+0x352>
    28f8:	80 e3       	ldi	r24, 0x30	; 48
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	b3 01       	movw	r22, r6
    28fe:	0e 94 d5 14 	call	0x29aa	; 0x29aa <fputc>
    2902:	02 ff       	sbrs	r16, 2
    2904:	1d c0       	rjmp	.+58     	; 0x2940 <vfprintf+0x37c>
    2906:	01 fd       	sbrc	r16, 1
    2908:	03 c0       	rjmp	.+6      	; 0x2910 <vfprintf+0x34c>
    290a:	88 e7       	ldi	r24, 0x78	; 120
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	0e c0       	rjmp	.+28     	; 0x292c <vfprintf+0x368>
    2910:	88 e5       	ldi	r24, 0x58	; 88
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	0b c0       	rjmp	.+22     	; 0x292c <vfprintf+0x368>
    2916:	80 2f       	mov	r24, r16
    2918:	86 78       	andi	r24, 0x86	; 134
    291a:	91 f0       	breq	.+36     	; 0x2940 <vfprintf+0x37c>
    291c:	01 ff       	sbrs	r16, 1
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <vfprintf+0x360>
    2920:	8b e2       	ldi	r24, 0x2B	; 43
    2922:	01 c0       	rjmp	.+2      	; 0x2926 <vfprintf+0x362>
    2924:	80 e2       	ldi	r24, 0x20	; 32
    2926:	f7 fc       	sbrc	r15, 7
    2928:	8d e2       	ldi	r24, 0x2D	; 45
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	b3 01       	movw	r22, r6
    292e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <fputc>
    2932:	06 c0       	rjmp	.+12     	; 0x2940 <vfprintf+0x37c>
    2934:	80 e3       	ldi	r24, 0x30	; 48
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	b3 01       	movw	r22, r6
    293a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <fputc>
    293e:	9a 94       	dec	r9
    2940:	d9 14       	cp	r13, r9
    2942:	c0 f3       	brcs	.-16     	; 0x2934 <vfprintf+0x370>
    2944:	da 94       	dec	r13
    2946:	f1 01       	movw	r30, r2
    2948:	ed 0d       	add	r30, r13
    294a:	f1 1d       	adc	r31, r1
    294c:	80 81       	ld	r24, Z
    294e:	90 e0       	ldi	r25, 0x00	; 0
    2950:	b3 01       	movw	r22, r6
    2952:	0e 94 d5 14 	call	0x29aa	; 0x29aa <fputc>
    2956:	dd 20       	and	r13, r13
    2958:	a9 f7       	brne	.-22     	; 0x2944 <vfprintf+0x380>
    295a:	06 c0       	rjmp	.+12     	; 0x2968 <vfprintf+0x3a4>
    295c:	80 e2       	ldi	r24, 0x20	; 32
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	b3 01       	movw	r22, r6
    2962:	0e 94 d5 14 	call	0x29aa	; 0x29aa <fputc>
    2966:	ea 94       	dec	r14
    2968:	ee 20       	and	r14, r14
    296a:	c1 f7       	brne	.-16     	; 0x295c <vfprintf+0x398>
    296c:	43 ce       	rjmp	.-890    	; 0x25f4 <vfprintf+0x30>
    296e:	f3 01       	movw	r30, r6
    2970:	66 81       	ldd	r22, Z+6	; 0x06
    2972:	77 81       	ldd	r23, Z+7	; 0x07
    2974:	cb 01       	movw	r24, r22
    2976:	2b 96       	adiw	r28, 0x0b	; 11
    2978:	e2 e1       	ldi	r30, 0x12	; 18
    297a:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__epilogue_restores__>

0000297e <strnlen_P>:
    297e:	fc 01       	movw	r30, r24
    2980:	05 90       	lpm	r0, Z+
    2982:	61 50       	subi	r22, 0x01	; 1
    2984:	70 40       	sbci	r23, 0x00	; 0
    2986:	01 10       	cpse	r0, r1
    2988:	d8 f7       	brcc	.-10     	; 0x2980 <strnlen_P+0x2>
    298a:	80 95       	com	r24
    298c:	90 95       	com	r25
    298e:	8e 0f       	add	r24, r30
    2990:	9f 1f       	adc	r25, r31
    2992:	08 95       	ret

00002994 <strnlen>:
    2994:	fc 01       	movw	r30, r24
    2996:	61 50       	subi	r22, 0x01	; 1
    2998:	70 40       	sbci	r23, 0x00	; 0
    299a:	01 90       	ld	r0, Z+
    299c:	01 10       	cpse	r0, r1
    299e:	d8 f7       	brcc	.-10     	; 0x2996 <strnlen+0x2>
    29a0:	80 95       	com	r24
    29a2:	90 95       	com	r25
    29a4:	8e 0f       	add	r24, r30
    29a6:	9f 1f       	adc	r25, r31
    29a8:	08 95       	ret

000029aa <fputc>:
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	8c 01       	movw	r16, r24
    29b4:	eb 01       	movw	r28, r22
    29b6:	8b 81       	ldd	r24, Y+3	; 0x03
    29b8:	81 ff       	sbrs	r24, 1
    29ba:	1b c0       	rjmp	.+54     	; 0x29f2 <fputc+0x48>
    29bc:	82 ff       	sbrs	r24, 2
    29be:	0d c0       	rjmp	.+26     	; 0x29da <fputc+0x30>
    29c0:	2e 81       	ldd	r18, Y+6	; 0x06
    29c2:	3f 81       	ldd	r19, Y+7	; 0x07
    29c4:	8c 81       	ldd	r24, Y+4	; 0x04
    29c6:	9d 81       	ldd	r25, Y+5	; 0x05
    29c8:	28 17       	cp	r18, r24
    29ca:	39 07       	cpc	r19, r25
    29cc:	64 f4       	brge	.+24     	; 0x29e6 <fputc+0x3c>
    29ce:	e8 81       	ld	r30, Y
    29d0:	f9 81       	ldd	r31, Y+1	; 0x01
    29d2:	01 93       	st	Z+, r16
    29d4:	f9 83       	std	Y+1, r31	; 0x01
    29d6:	e8 83       	st	Y, r30
    29d8:	06 c0       	rjmp	.+12     	; 0x29e6 <fputc+0x3c>
    29da:	e8 85       	ldd	r30, Y+8	; 0x08
    29dc:	f9 85       	ldd	r31, Y+9	; 0x09
    29de:	80 2f       	mov	r24, r16
    29e0:	09 95       	icall
    29e2:	89 2b       	or	r24, r25
    29e4:	31 f4       	brne	.+12     	; 0x29f2 <fputc+0x48>
    29e6:	8e 81       	ldd	r24, Y+6	; 0x06
    29e8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ea:	01 96       	adiw	r24, 0x01	; 1
    29ec:	9f 83       	std	Y+7, r25	; 0x07
    29ee:	8e 83       	std	Y+6, r24	; 0x06
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <fputc+0x4c>
    29f2:	0f ef       	ldi	r16, 0xFF	; 255
    29f4:	1f ef       	ldi	r17, 0xFF	; 255
    29f6:	c8 01       	movw	r24, r16
    29f8:	df 91       	pop	r29
    29fa:	cf 91       	pop	r28
    29fc:	1f 91       	pop	r17
    29fe:	0f 91       	pop	r16
    2a00:	08 95       	ret

00002a02 <__ultoa_invert>:
    2a02:	fa 01       	movw	r30, r20
    2a04:	aa 27       	eor	r26, r26
    2a06:	28 30       	cpi	r18, 0x08	; 8
    2a08:	51 f1       	breq	.+84     	; 0x2a5e <__ultoa_invert+0x5c>
    2a0a:	20 31       	cpi	r18, 0x10	; 16
    2a0c:	81 f1       	breq	.+96     	; 0x2a6e <__ultoa_invert+0x6c>
    2a0e:	e8 94       	clt
    2a10:	6f 93       	push	r22
    2a12:	6e 7f       	andi	r22, 0xFE	; 254
    2a14:	6e 5f       	subi	r22, 0xFE	; 254
    2a16:	7f 4f       	sbci	r23, 0xFF	; 255
    2a18:	8f 4f       	sbci	r24, 0xFF	; 255
    2a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a1c:	af 4f       	sbci	r26, 0xFF	; 255
    2a1e:	b1 e0       	ldi	r27, 0x01	; 1
    2a20:	3e d0       	rcall	.+124    	; 0x2a9e <__ultoa_invert+0x9c>
    2a22:	b4 e0       	ldi	r27, 0x04	; 4
    2a24:	3c d0       	rcall	.+120    	; 0x2a9e <__ultoa_invert+0x9c>
    2a26:	67 0f       	add	r22, r23
    2a28:	78 1f       	adc	r23, r24
    2a2a:	89 1f       	adc	r24, r25
    2a2c:	9a 1f       	adc	r25, r26
    2a2e:	a1 1d       	adc	r26, r1
    2a30:	68 0f       	add	r22, r24
    2a32:	79 1f       	adc	r23, r25
    2a34:	8a 1f       	adc	r24, r26
    2a36:	91 1d       	adc	r25, r1
    2a38:	a1 1d       	adc	r26, r1
    2a3a:	6a 0f       	add	r22, r26
    2a3c:	71 1d       	adc	r23, r1
    2a3e:	81 1d       	adc	r24, r1
    2a40:	91 1d       	adc	r25, r1
    2a42:	a1 1d       	adc	r26, r1
    2a44:	20 d0       	rcall	.+64     	; 0x2a86 <__ultoa_invert+0x84>
    2a46:	09 f4       	brne	.+2      	; 0x2a4a <__ultoa_invert+0x48>
    2a48:	68 94       	set
    2a4a:	3f 91       	pop	r19
    2a4c:	2a e0       	ldi	r18, 0x0A	; 10
    2a4e:	26 9f       	mul	r18, r22
    2a50:	11 24       	eor	r1, r1
    2a52:	30 19       	sub	r19, r0
    2a54:	30 5d       	subi	r19, 0xD0	; 208
    2a56:	31 93       	st	Z+, r19
    2a58:	de f6       	brtc	.-74     	; 0x2a10 <__ultoa_invert+0xe>
    2a5a:	cf 01       	movw	r24, r30
    2a5c:	08 95       	ret
    2a5e:	46 2f       	mov	r20, r22
    2a60:	47 70       	andi	r20, 0x07	; 7
    2a62:	40 5d       	subi	r20, 0xD0	; 208
    2a64:	41 93       	st	Z+, r20
    2a66:	b3 e0       	ldi	r27, 0x03	; 3
    2a68:	0f d0       	rcall	.+30     	; 0x2a88 <__ultoa_invert+0x86>
    2a6a:	c9 f7       	brne	.-14     	; 0x2a5e <__ultoa_invert+0x5c>
    2a6c:	f6 cf       	rjmp	.-20     	; 0x2a5a <__ultoa_invert+0x58>
    2a6e:	46 2f       	mov	r20, r22
    2a70:	4f 70       	andi	r20, 0x0F	; 15
    2a72:	40 5d       	subi	r20, 0xD0	; 208
    2a74:	4a 33       	cpi	r20, 0x3A	; 58
    2a76:	18 f0       	brcs	.+6      	; 0x2a7e <__ultoa_invert+0x7c>
    2a78:	49 5d       	subi	r20, 0xD9	; 217
    2a7a:	31 fd       	sbrc	r19, 1
    2a7c:	40 52       	subi	r20, 0x20	; 32
    2a7e:	41 93       	st	Z+, r20
    2a80:	02 d0       	rcall	.+4      	; 0x2a86 <__ultoa_invert+0x84>
    2a82:	a9 f7       	brne	.-22     	; 0x2a6e <__ultoa_invert+0x6c>
    2a84:	ea cf       	rjmp	.-44     	; 0x2a5a <__ultoa_invert+0x58>
    2a86:	b4 e0       	ldi	r27, 0x04	; 4
    2a88:	a6 95       	lsr	r26
    2a8a:	97 95       	ror	r25
    2a8c:	87 95       	ror	r24
    2a8e:	77 95       	ror	r23
    2a90:	67 95       	ror	r22
    2a92:	ba 95       	dec	r27
    2a94:	c9 f7       	brne	.-14     	; 0x2a88 <__ultoa_invert+0x86>
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	61 05       	cpc	r22, r1
    2a9a:	71 05       	cpc	r23, r1
    2a9c:	08 95       	ret
    2a9e:	9b 01       	movw	r18, r22
    2aa0:	ac 01       	movw	r20, r24
    2aa2:	0a 2e       	mov	r0, r26
    2aa4:	06 94       	lsr	r0
    2aa6:	57 95       	ror	r21
    2aa8:	47 95       	ror	r20
    2aaa:	37 95       	ror	r19
    2aac:	27 95       	ror	r18
    2aae:	ba 95       	dec	r27
    2ab0:	c9 f7       	brne	.-14     	; 0x2aa4 <__ultoa_invert+0xa2>
    2ab2:	62 0f       	add	r22, r18
    2ab4:	73 1f       	adc	r23, r19
    2ab6:	84 1f       	adc	r24, r20
    2ab8:	95 1f       	adc	r25, r21
    2aba:	a0 1d       	adc	r26, r0
    2abc:	08 95       	ret

00002abe <_exit>:
    2abe:	f8 94       	cli

00002ac0 <__stop_program>:
    2ac0:	ff cf       	rjmp	.-2      	; 0x2ac0 <__stop_program>
